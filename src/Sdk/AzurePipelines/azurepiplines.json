{
    "version": "pipelines-v1.0",
    "definitions": {
        "workflow-key": {
            "context": [
                "parameters",
                "variables"
            ],
            "string": {}
        },
        "workflow-value": {
            "context": [
                "parameters",
                "variables"
            ],
            "one-of": [
                "boolean",
                "mapping",
                "null",
                "number",
                "sequence",
                "string"
            ]
        },
        "workflow-value-no-expand": {
            "context": [
                "no-expand"
            ],
            "one-of": [
                "boolean",
                "mapping",
                "null",
                "number",
                "sequence",
                "string"
            ]
        },
        "single-layer-workflow-mapping": {
            "context": [
                "parameters",
                "variables"
            ],
            "mapping": {
                "loose-key-type": "workflow-key",
                "loose-value-type": "workflow-value-no-expand"
            }
        },
        "single-layer-workflow-sequence": {
            "context": [
                "parameters",
                "variables"
            ],
            "sequence": {
                "item-type": "workflow-value-no-expand"
            }
        },
        "variable-result": {
            "context": [
                "variables",
                "dependencies",
                "stageDependencies",
                "pipeline",
                "resources",
                "Counter(0,2)"
            ],
            "string": {}
        },
        "job-if-result": {
            "context": [
                "variables",
                "dependencies",
                "stageDependencies",
                "Always(0,0)",
                "Canceled(0,0)",
                "Succeeded(0,MAX)",
                "SucceededOrFailed(0,MAX)",
                "Failed(0,MAX)"
            ],
            "boolean": {}
        },
        "stage-if-result": {
            "context": [
                "variables",
                "dependencies",
                "Always(0,0)",
                "Canceled(0,0)",
                "Succeeded(0,MAX)",
                "SucceededOrFailed(0,MAX)",
                "Failed(0,MAX)"
            ],
            "boolean": {}
        },
        "azp-number": {
            "string": {}
        },
        "azp-string": {
            "string": {}
        },
        "stringList": {
            "sequence": {
                "item-type": "string"
            }
        },
        "azp-sequence": {
            "sequence": {
                "item-type": "azp-any"
            }
        },
        "azp-mapping": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "any-0": {
            "string": {}
        },
        "any-1": {
            "sequence": {
                "item-type": "azp-any"
            }
        },
        "any-2": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "azp-any": {
            "one-of": [
                "any-0",
                "any-1",
                "any-2",
                "boolean",
                "null",
                "number"
            ]
        },
        "pipeline-0": {
            "mapping": {
                "properties": {
                    "stages": {
                        "type": "stages",
                        "description": "Stages are groups of jobs that can run without human intervention",
                        "required": true
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where jobs in this pipeline will run unless otherwise specified"
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-1": {
            "mapping": {
                "properties": {
                    "extends": {
                        "type": "extends",
                        "description": "Extends a template",
                        "required": true
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where jobs in this pipeline will run unless otherwise specified"
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-2": {
            "mapping": {
                "properties": {
                    "jobs": {
                        "type": "jobs",
                        "description": "Jobs represent units of work which can be assigned to a single agent or server",
                        "required": true
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where jobs in this pipeline will run unless otherwise specified"
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-3": {
            "mapping": {
                "properties": {
                    "phases": {
                        "type": "phases",
                        "description": "Phases which make up the pipeline",
                        "required": true
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-4": {
            "mapping": {
                "properties": {
                    "strategy": {
                        "type": "jobStrategy",
                        "description": "Execution strategy for this job"
                    },
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "jobContainer",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "jobServices"
                    },
                    "workspace": {
                        "type": "jobWorkspace"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run in this job",
                        "required": true
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-5": {
            "mapping": {
                "properties": {
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "queue": {
                        "type": "phaseQueueTarget",
                        "description": "Queue where this phase will run"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run in this phase",
                        "required": true
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline-6": {
            "mapping": {
                "properties": {
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "server": {
                        "type": "phaseServerTarget",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run in this phase",
                        "required": true
                    },
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipeline": {
            "one-of": [
                "pipeline-0",
                "pipeline-1",
                "pipeline-2",
                "pipeline-4"
            ]
        },
        "pipelineBase": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "string_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "azp-boolean",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "schedules"
                    },
                    "resources": {
                        "type": "resources",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Variables for this pipeline"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipelineTrigger": {
            "mapping": {
                "properties": {
                    "trigger": {
                        "type": "trigger",
                        "description": "Continuous integration triggers"
                    },
                    "name": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "any_allowExpressions",
                        "description": "Append the commit message to the build number"
                    },
                    "parameters": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "any_allowExpressions",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "any_allowExpressions"
                    },
                    "resources": {
                        "type": "any_allowExpressions",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "any_allowExpressions",
                        "description": "Variables for the entire pipeline"
                    },
                    "stages": {
                        "type": "any_allowExpressions"
                    },
                    "jobs": {
                        "type": "any_allowExpressions",
                        "description": "Jobs which make up the pipeline"
                    },
                    "extends": {
                        "type": "any_allowExpressions",
                        "description": "Extends a template"
                    },
                    "phases": {
                        "type": "any_allowExpressions",
                        "description": "Phases which make up the pipeline"
                    },
                    "strategy": {
                        "type": "any_allowExpressions",
                        "description": "Execution strategy for the job"
                    },
                    "continueOnError": {
                        "type": "any_allowExpressions",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "any_allowExpressions",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "any_allowExpressions",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "any_allowExpressions"
                    },
                    "workspace": {
                        "type": "any_allowExpressions"
                    },
                    "steps": {
                        "type": "any_allowExpressions",
                        "description": "A list of steps to run"
                    },
                    "queue": {
                        "type": "any_allowExpressions",
                        "description": "Queue where this phase will run"
                    },
                    "server": {
                        "type": "any_allowExpressions",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipelineParameters": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "pipelineTemplateParameters",
                        "description": "Pipeline template parameters"
                    },
                    "name": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "any_allowExpressions",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "any_allowExpressions",
                        "description": "Continuous integration triggers"
                    },
                    "pr": {
                        "type": "any_allowExpressions",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "any_allowExpressions"
                    },
                    "resources": {
                        "type": "any_allowExpressions",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "any_allowExpressions",
                        "description": "Variables for the entire pipeline"
                    },
                    "stages": {
                        "type": "any_allowExpressions"
                    },
                    "jobs": {
                        "type": "any_allowExpressions",
                        "description": "Jobs which make up the pipeline"
                    },
                    "extends": {
                        "type": "any_allowExpressions",
                        "description": "Extends a template"
                    },
                    "phases": {
                        "type": "any_allowExpressions",
                        "description": "Phases which make up the pipeline"
                    },
                    "strategy": {
                        "type": "any_allowExpressions",
                        "description": "Execution strategy for the job"
                    },
                    "continueOnError": {
                        "type": "any_allowExpressions",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "any_allowExpressions",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "any_allowExpressions",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "any_allowExpressions"
                    },
                    "workspace": {
                        "type": "any_allowExpressions"
                    },
                    "steps": {
                        "type": "any_allowExpressions",
                        "description": "A list of steps to run"
                    },
                    "queue": {
                        "type": "any_allowExpressions",
                        "description": "Queue where this phase will run"
                    },
                    "server": {
                        "type": "any_allowExpressions",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipelinePR": {
            "mapping": {
                "properties": {
                    "pr": {
                        "type": "pr",
                        "description": "Pull request triggers"
                    },
                    "name": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "any_allowExpressions",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "any_allowExpressions",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline template parameters"
                    },
                    "schedules": {
                        "type": "any_allowExpressions"
                    },
                    "resources": {
                        "type": "any_allowExpressions",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "any_allowExpressions",
                        "description": "Variables for the entire pipeline"
                    },
                    "stages": {
                        "type": "any_allowExpressions"
                    },
                    "jobs": {
                        "type": "any_allowExpressions",
                        "description": "Jobs which make up the pipeline"
                    },
                    "extends": {
                        "type": "any_allowExpressions",
                        "description": "Extends a template"
                    },
                    "phases": {
                        "type": "any_allowExpressions",
                        "description": "Phases which make up the pipeline"
                    },
                    "strategy": {
                        "type": "any_allowExpressions",
                        "description": "Execution strategy for the job"
                    },
                    "continueOnError": {
                        "type": "any_allowExpressions",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "any_allowExpressions",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "any_allowExpressions",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "any_allowExpressions"
                    },
                    "workspace": {
                        "type": "any_allowExpressions"
                    },
                    "steps": {
                        "type": "any_allowExpressions",
                        "description": "A list of steps to run"
                    },
                    "queue": {
                        "type": "any_allowExpressions",
                        "description": "Queue where this phase will run"
                    },
                    "server": {
                        "type": "any_allowExpressions",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipelineSchedules": {
            "mapping": {
                "properties": {
                    "schedules": {
                        "type": "schedules"
                    },
                    "name": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "any_allowExpressions",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "any_allowExpressions",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "any_allowExpressions",
                        "description": "Pull request triggers"
                    },
                    "resources": {
                        "type": "any_allowExpressions",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "any_allowExpressions",
                        "description": "Variables for the entire pipeline"
                    },
                    "stages": {
                        "type": "any_allowExpressions"
                    },
                    "jobs": {
                        "type": "any_allowExpressions",
                        "description": "Jobs which make up the pipeline"
                    },
                    "extends": {
                        "type": "any_allowExpressions",
                        "description": "Extends a template"
                    },
                    "phases": {
                        "type": "any_allowExpressions",
                        "description": "Phases which make up the pipeline"
                    },
                    "strategy": {
                        "type": "any_allowExpressions",
                        "description": "Execution strategy for the job"
                    },
                    "continueOnError": {
                        "type": "any_allowExpressions",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "any_allowExpressions",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "any_allowExpressions",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "any_allowExpressions"
                    },
                    "workspace": {
                        "type": "any_allowExpressions"
                    },
                    "steps": {
                        "type": "any_allowExpressions",
                        "description": "A list of steps to run"
                    },
                    "queue": {
                        "type": "any_allowExpressions",
                        "description": "Queue where this phase will run"
                    },
                    "server": {
                        "type": "any_allowExpressions",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pipelineAnyBase": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline name"
                    },
                    "appendCommitMessageToRunName": {
                        "type": "any_allowExpressions",
                        "description": "Append the commit message to the build number"
                    },
                    "trigger": {
                        "type": "any_allowExpressions",
                        "description": "Continuous integration triggers"
                    },
                    "parameters": {
                        "type": "any_allowExpressions",
                        "description": "Pipeline template parameters"
                    },
                    "pr": {
                        "type": "any_allowExpressions",
                        "description": "Pull request triggers"
                    },
                    "schedules": {
                        "type": "any_allowExpressions"
                    },
                    "resources": {
                        "type": "any_allowExpressions",
                        "description": "Containers and repositories used in the build"
                    },
                    "variables": {
                        "type": "any_allowExpressions",
                        "description": "Variables for the entire pipeline"
                    },
                    "stages": {
                        "type": "any_allowExpressions"
                    },
                    "jobs": {
                        "type": "any_allowExpressions",
                        "description": "Jobs which make up the pipeline"
                    },
                    "extends": {
                        "type": "any_allowExpressions",
                        "description": "Extends a template"
                    },
                    "phases": {
                        "type": "any_allowExpressions",
                        "description": "Phases which make up the pipeline"
                    },
                    "strategy": {
                        "type": "any_allowExpressions",
                        "description": "Execution strategy for the job"
                    },
                    "continueOnError": {
                        "type": "any_allowExpressions",
                        "description": "Continue running even on failure?"
                    },
                    "pool": {
                        "type": "any_allowExpressions",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "any_allowExpressions",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "any_allowExpressions"
                    },
                    "workspace": {
                        "type": "any_allowExpressions"
                    },
                    "steps": {
                        "type": "any_allowExpressions",
                        "description": "A list of steps to run"
                    },
                    "queue": {
                        "type": "any_allowExpressions",
                        "description": "Queue where this phase will run"
                    },
                    "server": {
                        "type": "any_allowExpressions",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    }
                }
            }
        },
        "pr-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "pr-1": {
            "sequence": {
                "item-type": "branchFilter"
            }
        },
        "pr-2": {
            "mapping": {
                "properties": {
                    "autoCancel": {
                        "type": "azp-boolean",
                        "description": "Whether to cancel running PR builds when a new commit lands in the branch"
                    },
                    "branches": {
                        "type": "includeExcludeFilters"
                    },
                    "paths": {
                        "type": "includeExcludeFilters"
                    },
                    "drafts": {
                        "type": "azp-boolean",
                        "description": "Whether to start a run when a draft PR is created"
                    }
                }
            }
        },
        "pr": {
            "one-of": [
                "pr-0",
                "pr-1",
                "pr-2"
            ]
        },
        "trigger-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "trigger-1": {
            "sequence": {
                "item-type": "branchFilter"
            }
        },
        "trigger-2": {
            "mapping": {
                "properties": {
                    "batch": {
                        "type": "azp-boolean",
                        "description": "Whether to batch changes per branch"
                    },
                    "branches": {
                        "type": "includeExcludeFilters"
                    },
                    "paths": {
                        "type": "includeExcludeFilters"
                    },
                    "tags": {
                        "type": "includeExcludeFilters"
                    }
                }
            }
        },
        "trigger": {
            "one-of": [
                "trigger-0",
                "trigger-1",
                "trigger-2"
            ]
        },
        "includeExcludeFilters": {
            "mapping": {
                "properties": {
                    "include": {
                        "type": "branchFilterArray"
                    },
                    "exclude": {
                        "type": "branchFilterArray"
                    }
                }
            }
        },
        "includeExcludeStringFilters-0": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "includeExcludeStringFilters-1": {
            "mapping": {
                "properties": {
                    "include": {
                        "type": "sequenceOfNonEmptyString"
                    },
                    "exclude": {
                        "type": "sequenceOfNonEmptyString"
                    }
                }
            }
        },
        "includeExcludeStringFilters": {
            "one-of": [
                "includeExcludeStringFilters-0",
                "includeExcludeStringFilters-1"
            ]
        },
        "branchFilterArray": {
            "sequence": {
                "item-type": "branchFilter"
            }
        },
        "branchFilter": {
            "string": {}
        },
        "templateParameters-0": {
            "sequence": {
                "item-type": "templateParameter"
            }
        },
        "templateParameters-1": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "templateParameters": {
            "one-of": [
                "templateParameters-0",
                "templateParameters-1"
            ]
        },
        "templateParameter": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the parameter"
                    },
                    "type": {
                        "type": "templateParameterType"
                    },
                    "default": {
                        "type": "azp-any"
                    },
                    "values": {
                        "type": "sequenceOfNonEmptyString"
                    }
                }
            }
        },
        "templateParameterType-0": {
            "string": {
                "pattern": "^boolean$"
            }
        },
        "templateParameterType-1": {
            "string": {
                "pattern": "^container$"
            }
        },
        "templateParameterType-2": {
            "string": {
                "pattern": "^containerList$"
            }
        },
        "templateParameterType-3": {
            "string": {
                "pattern": "^deployment$"
            }
        },
        "templateParameterType-4": {
            "string": {
                "pattern": "^deploymentList$"
            }
        },
        "templateParameterType-5": {
            "string": {
                "pattern": "^job$"
            }
        },
        "templateParameterType-6": {
            "string": {
                "pattern": "^jobList$"
            }
        },
        "templateParameterType-7": {
            "string": {
                "pattern": "^legacyObject$"
            }
        },
        "templateParameterType-8": {
            "string": {
                "pattern": "^number$"
            }
        },
        "templateParameterType-9": {
            "string": {
                "pattern": "^object$"
            }
        },
        "templateParameterType-10": {
            "string": {
                "pattern": "^stage$"
            }
        },
        "templateParameterType-11": {
            "string": {
                "pattern": "^stageList$"
            }
        },
        "templateParameterType-12": {
            "string": {
                "pattern": "^step$"
            }
        },
        "templateParameterType-13": {
            "string": {
                "pattern": "^stepList$"
            }
        },
        "templateParameterType-14": {
            "string": {
                "pattern": "^string$"
            }
        },
        "templateParameterType-15": {
            "string": {
                "pattern": "^stringList$"
            }
        },
        "templateParameterType": {
            "one-of": [
                "templateParameterType-0",
                "templateParameterType-1",
                "templateParameterType-2",
                "templateParameterType-3",
                "templateParameterType-4",
                "templateParameterType-5",
                "templateParameterType-6",
                "templateParameterType-7",
                "templateParameterType-8",
                "templateParameterType-9",
                "templateParameterType-10",
                "templateParameterType-11",
                "templateParameterType-12",
                "templateParameterType-13",
                "templateParameterType-14",
                "templateParameterType-15"
            ]
        },
        "pipelineTemplateParameters": {
            "sequence": {
                "item-type": "pipelineTemplateParameter"
            }
        },
        "pipelineTemplateParameter": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the parameter"
                    },
                    "type": {
                        "type": "pipelineTemplateParameterType"
                    },
                    "default": {
                        "type": "azp-any"
                    },
                    "values": {
                        "type": "sequenceOfNonEmptyString"
                    }
                }
            }
        },
        "pipelineTemplateParameterType-0": {
            "string": {
                "pattern": "^boolean$"
            }
        },
        "pipelineTemplateParameterType-1": {
            "string": {
                "pattern": "^container$"
            }
        },
        "pipelineTemplateParameterType-2": {
            "string": {
                "pattern": "^containerList$"
            }
        },
        "pipelineTemplateParameterType-3": {
            "string": {
                "pattern": "^deployment$"
            }
        },
        "pipelineTemplateParameterType-4": {
            "string": {
                "pattern": "^deploymentList$"
            }
        },
        "pipelineTemplateParameterType-5": {
            "string": {
                "pattern": "^environment$"
            }
        },
        "pipelineTemplateParameterType-6": {
            "string": {
                "pattern": "^filePath$"
            }
        },
        "pipelineTemplateParameterType-7": {
            "string": {
                "pattern": "^job$"
            }
        },
        "pipelineTemplateParameterType-8": {
            "string": {
                "pattern": "^jobList$"
            }
        },
        "pipelineTemplateParameterType-9": {
            "string": {
                "pattern": "^number$"
            }
        },
        "pipelineTemplateParameterType-10": {
            "string": {
                "pattern": "^object$"
            }
        },
        "pipelineTemplateParameterType-11": {
            "string": {
                "pattern": "^pool$"
            }
        },
        "pipelineTemplateParameterType-12": {
            "string": {
                "pattern": "^secureFile$"
            }
        },
        "pipelineTemplateParameterType-13": {
            "string": {
                "pattern": "^serviceConnection$"
            }
        },
        "pipelineTemplateParameterType-14": {
            "string": {
                "pattern": "^stage$"
            }
        },
        "pipelineTemplateParameterType-15": {
            "string": {
                "pattern": "^stageList$"
            }
        },
        "pipelineTemplateParameterType-16": {
            "string": {
                "pattern": "^step$"
            }
        },
        "pipelineTemplateParameterType-17": {
            "string": {
                "pattern": "^stepList$"
            }
        },
        "pipelineTemplateParameterType-18": {
            "string": {
                "pattern": "^string$"
            }
        },
        "pipelineTemplateParameterType-19": {
            "string": {
                "pattern": "^stringList$"
            }
        },
        "pipelineTemplateParameterType": {
            "one-of": [
                "pipelineTemplateParameterType-0",
                "pipelineTemplateParameterType-1",
                "pipelineTemplateParameterType-2",
                "pipelineTemplateParameterType-3",
                "pipelineTemplateParameterType-4",
                "pipelineTemplateParameterType-5",
                "pipelineTemplateParameterType-6",
                "pipelineTemplateParameterType-7",
                "pipelineTemplateParameterType-8",
                "pipelineTemplateParameterType-9",
                "pipelineTemplateParameterType-10",
                "pipelineTemplateParameterType-11",
                "pipelineTemplateParameterType-12",
                "pipelineTemplateParameterType-13",
                "pipelineTemplateParameterType-14",
                "pipelineTemplateParameterType-15",
                "pipelineTemplateParameterType-16",
                "pipelineTemplateParameterType-17",
                "pipelineTemplateParameterType-18",
                "pipelineTemplateParameterType-19"
            ]
        },
        "schedules": {
            "sequence": {
                "item-type": "schedule"
            }
        },
        "schedule": {
            "mapping": {
                "properties": {
                    "cron": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string"
                    },
                    "branches": {
                        "type": "includeExcludeFilters"
                    },
                    "batch": {
                        "type": "azp-boolean"
                    },
                    "always": {
                        "type": "azp-boolean"
                    }
                }
            }
        },
        "resources-0": {
            "mapping": {
                "properties": {
                    "builds": {
                        "type": "buildResources",
                        "description": "List of external build resources"
                    },
                    "containers": {
                        "type": "containerResources",
                        "description": "List of container images"
                    },
                    "pipelines": {
                        "type": "pipelineResources"
                    },
                    "repositories": {
                        "type": "repositoryResources",
                        "description": "List of external repositories"
                    },
                    "webhooks": {
                        "type": "webhookResources",
                        "description": "List of webhooks"
                    },
                    "packages": {
                        "type": "packageResources",
                        "description": "List of external packages"
                    }
                }
            }
        },
        "resources-1": {
            "sequence": {
                "item-type": "legacyResource"
            }
        },
        "resources": {
            "one-of": [
                "resources-0",
                "resources-1"
            ]
        },
        "buildResources": {
            "sequence": {
                "item-type": "buildResource"
            }
        },
        "buildResource": {
            "mapping": {
                "properties": {
                    "build": {
                        "type": "referenceName",
                        "description": "Alias or name of build artifact",
                        "first-property": true,
                        "required": true
                    },
                    "type": {
                        "type": "nonEmptyString",
                        "description": "Name of the artifact type",
                        "required": true
                    },
                    "connection": {
                        "type": "nonEmptyString",
                        "description": "Name of the connection. This connection will be used for all the communication related to this artifact.",
                        "required": true
                    },
                    "source": {
                        "type": "nonEmptyString",
                        "description": "Name of the source definition/build/job",
                        "required": true
                    },
                    "version": {
                        "type": "string_allowExpressions"
                    },
                    "branch": {
                        "type": "string_allowExpressions"
                    },
                    "trigger": {
                        "type": "buildResourceTrigger",
                        "description": "When the artifact mentioned in this build resource completes a build, its allowed to trigger this pipeline."
                    }
                }
            }
        },
        "buildResourceTrigger-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "buildResourceTrigger-1": {
            "string": {
                "pattern": "^true$"
            }
        },
        "buildResourceTrigger": {
            "one-of": [
                "buildResourceTrigger-0",
                "buildResourceTrigger-1"
            ]
        },
        "packageResources": {
            "sequence": {
                "item-type": "packageResource"
            }
        },
        "packageResource": {
            "mapping": {
                "properties": {
                    "package": {
                        "type": "referenceName",
                        "description": "Alias of package artifact",
                        "first-property": true,
                        "required": true
                    },
                    "type": {
                        "type": "nonEmptyString",
                        "description": "Type of the package. Ex - NuGet, NPM etc.",
                        "required": true
                    },
                    "connection": {
                        "type": "nonEmptyString",
                        "description": "Name of the connection. This connection will be used for all the communication related to this artifact.",
                        "required": true
                    },
                    "name": {
                        "type": "nonEmptyString",
                        "description": "Name of the package",
                        "required": true
                    },
                    "version": {
                        "type": "string_allowExpressions"
                    },
                    "tag": {
                        "type": "string_allowExpressions"
                    },
                    "trigger": {
                        "type": "packageResourceTrigger",
                        "description": "Trigger a new pipeline run when a new version of this package is available."
                    }
                }
            }
        },
        "packageResourceTrigger-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "packageResourceTrigger-1": {
            "string": {
                "pattern": "^true$"
            }
        },
        "packageResourceTrigger": {
            "one-of": [
                "packageResourceTrigger-0",
                "packageResourceTrigger-1"
            ]
        },
        "containerResources": {
            "sequence": {
                "item-type": "containerResource"
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "containerResource": {
            "mapping": {
                "properties": {
                    "container": {
                        "type": "referenceName",
                        "description": "ID for the container",
                        "first-property": true,
                        "required": true
                    },
                    "type": {
                        "type": "containerArtifactType"
                    },
                    "trigger": {
                        "type": "containerResourceTrigger"
                    },
                    "endpoint": {
                        "type": "string_allowExpressions",
                        "description": "ID of the service endpoint connecting to a private container registry"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the container's environment"
                    },
                    "image": {
                        "type": "azp-string",
                        "description": "Container image tag",
                        "required": true
                    },
                    "mapDockerSocket": {
                        "type": "azp-boolean",
                        "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
                    },
                    "options": {
                        "type": "string_allowExpressions",
                        "description": "Options to pass into container host"
                    },
                    "ports": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "volumes": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "mountReadOnly": {
                        "type": "readOnlyMounts"
                    }
                },
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "containerArtifactType-0": {
            "string": {
                "pattern": "^ACR$",
                "ignore-case": true
            }
        },
        "containerArtifactType-1": {
            "string": {}
        },
        "containerArtifactType": {
            "one-of": [
                "containerArtifactType-1"
            ]
        },
        "containerResourceTrigger-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "containerResourceTrigger-1": {
            "string": {
                "pattern": "^true$"
            }
        },
        "containerResourceTrigger-2": {
            "mapping": {
                "properties": {
                    "enabled": {
                        "type": "azp-boolean"
                    },
                    "tags": {
                        "type": "includeExcludeStringFilters"
                    }
                }
            }
        },
        "containerResourceTrigger": {
            "one-of": [
                "containerResourceTrigger-0",
                "containerResourceTrigger-1",
                "containerResourceTrigger-2"
            ]
        },
        "pipelineResources": {
            "sequence": {
                "item-type": "pipelineResource"
            }
        },
        "pipelineResource": {
            "mapping": {
                "properties": {
                    "pipeline": {
                        "type": "referenceName",
                        "description": "ID of the pipeline resource",
                        "first-property": true,
                        "required": true
                    },
                    "project": {
                        "type": "nonEmptyString"
                    },
                    "source": {
                        "type": "nonEmptyString"
                    },
                    "version": {
                        "type": "string_allowExpressions"
                    },
                    "branch": {
                        "type": "string_allowExpressions"
                    },
                    "tags": {
                        "type": "sequenceOfNonEmptyString"
                    },
                    "trigger": {
                        "type": "pipelineResourceTrigger"
                    }
                }
            }
        },
        "pipelineResourceTrigger-0": {
            "string": {
                "pattern": "^none$"
            }
        },
        "pipelineResourceTrigger-1": {
            "string": {
                "pattern": "^true$"
            }
        },
        "pipelineResourceTrigger-2": {
            "mapping": {
                "properties": {
                    "enabled": {
                        "type": "azp-boolean"
                    },
                    "branches": {
                        "type": "triggerBranchFilter"
                    },
                    "stages": {
                        "type": "sequenceOfNonEmptyString"
                    },
                    "tags": {
                        "type": "sequenceOfNonEmptyString"
                    }
                }
            }
        },
        "pipelineResourceTrigger": {
            "one-of": [
                "pipelineResourceTrigger-0",
                "pipelineResourceTrigger-1",
                "pipelineResourceTrigger-2"
            ]
        },
        "triggerBranchFilter-0": {
            "mapping": {
                "properties": {
                    "include": {
                        "type": "branchFilterArray"
                    },
                    "exclude": {
                        "type": "branchFilterArray"
                    }
                }
            }
        },
        "triggerBranchFilter-1": {
            "sequence": {
                "item-type": "branchFilter"
            }
        },
        "triggerBranchFilter": {
            "one-of": [
                "triggerBranchFilter-0",
                "triggerBranchFilter-1"
            ]
        },
        "repositoryResources": {
            "sequence": {
                "item-type": "repositoryResource"
            }
        },
        "repositoryResource": {
            "mapping": {
                "properties": {
                    "repository": {
                        "type": "referenceName",
                        "description": "ID of the external repository",
                        "first-property": true,
                        "required": true
                    },
                    "endpoint": {
                        "type": "nonEmptyString",
                        "description": "ID of the service endpoint connecting to this repository"
                    },
                    "trigger": {
                        "type": "trigger"
                    },
                    "checkoutOptions": {
                        "type": "repositoryCheckoutOptions"
                    },
                    "ref": {
                        "type": "string_allowExpressions"
                    }
                },
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "repositoryCheckoutOptions-clean": {
            "description": "Scorch the repo before fetching?",
            "allowed-values": [
                "true",
                "false"
            ]
        },
        "repositoryCheckoutOptions": {
            "mapping": {
                "properties": {
                    "clean": {
                        "type": "repositoryCheckoutOptions-clean",
                        "description": "Scorch the repo before fetching?"
                    },
                    "fetchDepth": {
                        "type": "azp-string",
                        "description": "Depth of Git graph to fetch"
                    },
                    "fetchTags": {
                        "type": "azp-string",
                        "description": "Fetch tags?"
                    },
                    "lfs": {
                        "type": "azp-string",
                        "description": "Fetch and checkout Git LFS objects?"
                    },
                    "submodules": {
                        "type": "azp-string",
                        "description": "Fetch and checkout submodules?"
                    },
                    "persistCredentials": {
                        "type": "azp-string",
                        "description": "Keep credentials available for later use?"
                    }
                }
            }
        },
        "legacyResource-clean": {
            "description": "Scorch the repo before fetching?",
            "allowed-values": [
                "true",
                "false"
            ]
        },
        "legacyResource": {
            "mapping": {
                "properties": {
                    "repo": {
                        "type": "legacyRepoResourceAlias",
                        "first-property": true,
                        "required": true
                    },
                    "clean": {
                        "type": "legacyResource-clean",
                        "description": "Scorch the repo before fetching?"
                    },
                    "fetchDepth": {
                        "type": "azp-string",
                        "description": "Depth of Git graph to fetch"
                    },
                    "lfs": {
                        "type": "azp-string",
                        "description": "Fetch and checkout Git LFS objects?"
                    }
                }
            }
        },
        "legacyRepoResourceAlias": {
            "string": {
                "pattern": "^self$"
            }
        },
        "webhookResources": {
            "sequence": {
                "item-type": "webhookResource"
            }
        },
        "webhookResource": {
            "mapping": {
                "properties": {
                    "webhook": {
                        "type": "referenceName",
                        "description": "Name of the webhook",
                        "first-property": true,
                        "required": true
                    },
                    "connection": {
                        "type": "nonEmptyString",
                        "description": "Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.",
                        "required": true
                    },
                    "type": {
                        "type": "nonEmptyString",
                        "description": "Name of the webhook extension. leave this empty if its offline webhook."
                    },
                    "filters": {
                        "type": "webhookFilters",
                        "description": "List of trigger filters."
                    }
                }
            }
        },
        "webhookFilters": {
            "sequence": {
                "item-type": "webhookFilter"
            }
        },
        "webhookFilter": {
            "mapping": {
                "properties": {
                    "path": {
                        "type": "nonEmptyString",
                        "description": "json path to select data from event payload",
                        "first-property": true,
                        "required": true
                    },
                    "value": {
                        "type": "nonEmptyString",
                        "description": "Expected value for the filter to match",
                        "required": true
                    }
                }
            }
        },
        "variablesTemplate": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "variables-0": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            },
            "azureVariableBlock": true
        },
        "variables-1": {
            "sequence": {
                "item-type": "variable"
            },
            "azureVariableBlock": true
        },
        "variables": {
            "one-of": [
                "variables-0",
                "variables-1"
            ],
            "context": [
                "parameters",
                "variables"
            ]
        },
        "variable-0": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    },
                    "value": {
                        "type": "azp-string"
                    },
                    "readonly": {
                        "type": "azp-boolean"
                    }
                }
            }
        },
        "variable-1": {
            "mapping": {
                "properties": {
                    "group": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    }
                }
            }
        },
        "variable-2": {
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString",
                        "first-property": true,
                        "required": true
                    },
                    "parameters": {
                        "type": "azp-mapping"
                    }
                }
            }
        },
        "variable": {
            "one-of": [
                "variable-0",
                "variable-1",
                "variable-2"
            ]
        },
        "stagesTemplate": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "stages": {
                        "type": "stages"
                    }
                }
            }
        },
        "stages": {
            "sequence": {
                "item-type": "stage"
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "stage-0": {
            "azureVariableBlockScope": true,
            "mapping": {
                "properties": {
                    "stage": {
                        "type": "azp-string",
                        "description": "ID of the stage",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the stage"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where jobs in this stage will run unless otherwise specified"
                    },
                    "dependsOn": {
                        "type": "jobDependsOn",
                        "description": "Any stages which must complete before this one"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this stage"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Stage-specific variables"
                    },
                    "jobs": {
                        "type": "jobs",
                        "description": "Jobs which make up the stage"
                    },
                    "lockBehavior": {
                        "type": "lockBehavior",
                        "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
                    },
                    "trigger": {
                        "type": "stageTrigger",
                        "description": "Stage trigger manual or automatic (default)"
                    },
                    "isSkippable": {
                        "type": "azp-boolean",
                        "description": "Setting false prevents the stage from being skipped. By default it's always true"
                    },
                    "templateContext": {
                        "type": "templateContext"
                    }
                }
            }
        },
        "stage-1": {
            "azureVariableBlockScope": true,
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString",
                        "description": "Reference to a template for this stage",
                        "first-property": true,
                        "required": true
                    },
                    "parameters": {
                        "type": "azp-mapping",
                        "description": "Parameters used in a stage template"
                    }
                }
            }
        },
        "stage": {
            "one-of": [
                "stage-0",
                "stage-1"
            ]
        },
        "lockBehavior-0": {
            "string": {
                "pattern": "^sequential$"
            }
        },
        "lockBehavior-1": {
            "string": {
                "pattern": "^runLatest$"
            }
        },
        "lockBehavior": {
            "one-of": [
                "lockBehavior-0",
                "lockBehavior-1"
            ]
        },
        "stageTrigger-0": {
            "string": {
                "pattern": "^manual$"
            }
        },
        "stageTrigger-1": {
            "string": {
                "pattern": "^automatic$"
            }
        },
        "stageTrigger": {
            "one-of": [
                "stageTrigger-0",
                "stageTrigger-1"
            ]
        },
        "extendsParameters": {
            "sequence": {
                "item-type": "templateParameter"
            }
        },
        "extendsTemplate-0": {
            "mapping": {
                "properties": {
                    "stages": {
                        "type": "stages",
                        "required": true
                    },
                    "trigger": {
                        "type": "trigger"
                    },
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "extendsParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "extendsTemplate-1": {
            "mapping": {
                "properties": {
                    "jobs": {
                        "type": "jobs",
                        "required": true
                    },
                    "trigger": {
                        "type": "trigger"
                    },
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "extendsParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "extendsTemplate-2": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "required": true
                    },
                    "trigger": {
                        "type": "trigger"
                    },
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "extendsParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "extendsTemplate-3": {
            "mapping": {
                "properties": {
                    "trigger": {
                        "type": "trigger"
                    },
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "extendsParameters"
                    },
                    "extends": {
                        "type": "extends",
                        "required": true
                    }
                }
            }
        },
        "extendsTemplate": {
            "one-of": [
                "extendsTemplate-0",
                "extendsTemplate-1",
                "extendsTemplate-2",
                "extendsTemplate-3"
            ]
        },
        "extendsTemplateBase": {
            "mapping": {
                "properties": {
                    "trigger": {
                        "type": "trigger"
                    },
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "extendsParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "parametersTemplate-0": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Step-specific parameters"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run",
                        "required": true
                    }
                }
            }
        },
        "parametersTemplate-1": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Parameters used in a job template"
                    },
                    "jobs": {
                        "type": "jobs",
                        "description": "Jobs which make up the pipeline"
                    }
                }
            }
        },
        "parametersTemplate-2": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "stages": {
                        "type": "stages"
                    }
                }
            }
        },
        "parametersTemplate-3": {
            "mapping": {
                "properties": {
                    "resources": {
                        "type": "resources"
                    },
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "extends": {
                        "type": "extends",
                        "description": "Extends a template",
                        "required": true
                    }
                }
            }
        },
        "parametersTemplate": {
            "one-of": [
                "parametersTemplate-0",
                "parametersTemplate-1",
                "parametersTemplate-2",
                "parametersTemplate-3"
            ]
        },
        "extends": {
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString"
                    },
                    "parameters": {
                        "type": "azp-mapping",
                        "description": "Parameters used in the extend"
                    }
                }
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "jobsTemplate-0": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Parameters used in a job template"
                    },
                    "jobs": {
                        "type": "jobs",
                        "description": "Jobs which make up the pipeline"
                    }
                }
            }
        },
        "jobsTemplate-1": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Parameters used in a phase template"
                    },
                    "phases": {
                        "type": "phases",
                        "description": "Phases which make up the pipeline"
                    }
                }
            }
        },
        "jobsTemplate": {
            "one-of": [
                "jobsTemplate-0"
            ]
        },
        "jobs": {
            "sequence": {
                "item-type": "job"
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "job-0": {
            "azureVariableBlockScope": true,
            "mapping": {
                "properties": {
                    "job": {
                        "type": "referenceName",
                        "description": "ID of the job",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the job"
                    },
                    "dependsOn": {
                        "type": "jobDependsOn",
                        "description": "Any jobs which must complete before this one"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this job"
                    },
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this job to complete before the server kills it"
                    },
                    "cancelTimeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for the job to cancel before forcibly terminating it"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Job-specific variables"
                    },
                    "strategy": {
                        "type": "jobStrategy",
                        "description": "Execution strategy for this job"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where this job will run"
                    },
                    "container": {
                        "type": "jobContainer",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "jobServices"
                    },
                    "workspace": {
                        "type": "jobWorkspace"
                    },
                    "uses": {
                        "type": "explicitResources",
                        "description": "Any resources required by this job that are not already referenced"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "templateContext": {
                        "type": "templateContext"
                    }
                }
            }
        },
        "job-1": {
            "azureVariableBlockScope": true,
            "mapping": {
                "properties": {
                    "deployment": {
                        "type": "azp-string",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the deployment"
                    },
                    "dependsOn": {
                        "type": "jobDependsOn",
                        "description": "Any jobs which must complete before this one"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this deployment"
                    },
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this job to complete before the server kills it"
                    },
                    "cancelTimeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for the job to cancel before forcibly terminating it"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Deployment-specific variables"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where this job will run"
                    },
                    "environment": {
                        "type": "deploymentEnvironment"
                    },
                    "strategy": {
                        "type": "deploymentStrategy",
                        "description": "Execution strategy for this deployment"
                    },
                    "workspace": {
                        "type": "jobWorkspace",
                        "description": "What to clean up before the job runs"
                    },
                    "uses": {
                        "type": "explicitResources",
                        "description": "Any resources required by this job that are not already referenced"
                    },
                    "container": {
                        "type": "jobContainer",
                        "description": "Container resource name"
                    },
                    "services": {
                        "type": "jobServices",
                        "description": "Container resources to run as a service container"
                    },
                    "templateContext": {
                        "type": "templateContext"
                    }
                }
            }
        },
        "job-2": {
            "azureVariableBlockScope": true,
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString",
                        "description": "Reference to a template for this deployment",
                        "first-property": true,
                        "required": true
                    },
                    "parameters": {
                        "type": "azp-mapping",
                        "description": "Parameters used in a deployment template"
                    }
                }
            }
        },
        "job": {
            "one-of": [
                "job-0",
                "job-1",
                "job-2"
            ]
        },
        "explicitResources": {
            "mapping": {
                "properties": {
                    "repositories": {
                        "type": "sequenceOfNonEmptyString",
                        "description": "Repository references"
                    },
                    "pools": {
                        "type": "sequenceOfNonEmptyString",
                        "description": "Pool references"
                    }
                }
            }
        },
        "pool-0": {
            "string": {}
        },
        "pool-1": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "nonEmptyString",
                        "description": "Name of a pool"
                    },
                    "demands": {
                        "type": "poolDemands",
                        "description": "List of demands (for a private pool)"
                    }
                },
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "pool": {
            "description": "Pool details",
            "one-of": [
                "pool-0",
                "pool-1"
            ]
        },
        "poolDemands-0": {
            "string": {}
        },
        "poolDemands-1": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "poolDemands": {
            "one-of": [
                "poolDemands-0",
                "poolDemands-1"
            ]
        },
        "jobContainer-0": {
            "string": {}
        },
        "jobContainer-1": {
            "mapping": {
                "properties": {
                    "alias": {
                        "type": "azp-string",
                        "description": "The alias of the container resource"
                    }
                }
            }
        },
        "jobContainer-2": {
            "mapping": {
                "properties": {
                    "endpoint": {
                        "type": "string_allowExpressions",
                        "description": "ID of the service endpoint connecting to a private container registry"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the container's environment"
                    },
                    "image": {
                        "type": "azp-string",
                        "description": "Container image tag",
                        "required": true
                    },
                    "mapDockerSocket": {
                        "type": "azp-boolean",
                        "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
                    },
                    "options": {
                        "type": "string_allowExpressions",
                        "description": "Options to pass into container host"
                    },
                    "ports": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "volumes": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "mountReadOnly": {
                        "type": "readOnlyMounts"
                    }
                }
            }
        },
        "jobContainer": {
            "one-of": [
                "jobContainer-0",
                "jobContainer-1",
                "jobContainer-2"
            ]
        },
        "containerBase": {
            "mapping": {
                "properties": {
                    "endpoint": {
                        "type": "string_allowExpressions",
                        "description": "ID of the service endpoint connecting to a private container registry"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the container's environment"
                    },
                    "image": {
                        "type": "azp-string",
                        "description": "Container image tag",
                        "required": true
                    },
                    "mapDockerSocket": {
                        "type": "azp-boolean",
                        "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
                    },
                    "options": {
                        "type": "string_allowExpressions",
                        "description": "Options to pass into container host"
                    },
                    "ports": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "volumes": {
                        "type": "sequenceOfString_allowExpressions"
                    },
                    "mountReadOnly": {
                        "type": "readOnlyMounts"
                    }
                }
            }
        },
        "readOnlyMounts": {
            "mapping": {
                "properties": {
                    "work": {
                        "type": "azp-boolean",
                        "description": "Mount the work directory as readonly"
                    },
                    "externals": {
                        "type": "azp-boolean",
                        "description": "Mount the externals directory as readonly"
                    },
                    "tools": {
                        "type": "azp-boolean",
                        "description": "Mount the tools directory as readonly"
                    },
                    "tasks": {
                        "type": "azp-boolean",
                        "description": "Mount the tasks directory as readonly"
                    }
                }
            }
        },
        "jobServices": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "jobWorkspace-clean": {
            "description": "Which parts of the workspace should be scorched before fetching",
            "allowed-values": [
                "outputs",
                "resources",
                "all"
            ]
        },
        "jobWorkspace": {
            "mapping": {
                "properties": {
                    "clean": {
                        "type": "jobWorkspace-clean",
                        "description": "Which parts of the workspace should be scorched before fetching"
                    }
                }
            }
        },
        "jobStrategy-0": {
            "mapping": {
                "properties": {
                    "matrix": {
                        "type": "jobMatrix"
                    },
                    "maxParallel": {
                        "type": "nonEmptyString",
                        "description": "Maximum number of jobs running in parallel"
                    }
                }
            }
        },
        "jobStrategy-1": {
            "mapping": {
                "properties": {
                    "parallel": {
                        "type": "nonEmptyString",
                        "description": "Run the job this many times"
                    }
                }
            }
        },
        "jobStrategy": {
            "one-of": [
                "jobStrategy-0",
                "jobStrategy-1"
            ]
        },
        "jobMatrix-0": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "jobMatrix-1": {
            "string": {}
        },
        "jobMatrix": {
            "one-of": [
                "jobMatrix-0",
                "jobMatrix-1"
            ]
        },
        "matrixProperties": {
            "description": "Variable-value pair to pass in this matrix instance",
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "deploymentEnvironment-0": {
            "string": {}
        },
        "deploymentEnvironment-1": {
            "mapping": {
                "properties": {
                    "name": {
                        "type": "nonEmptyString",
                        "description": "Name of environment"
                    },
                    "resourceName": {
                        "type": "nonEmptyString",
                        "description": "Name of resource"
                    },
                    "resourceId": {
                        "type": "nonEmptyString",
                        "description": "Id of resource"
                    },
                    "resourceType": {
                        "type": "nonEmptyString",
                        "description": "Type of environment resource"
                    },
                    "tags": {
                        "type": "nonEmptyString",
                        "description": "List of tag filters"
                    }
                }
            }
        },
        "deploymentEnvironment": {
            "description": "Environment details",
            "one-of": [
                "deploymentEnvironment-0",
                "deploymentEnvironment-1"
            ]
        },
        "deploymentStrategy-0": {
            "mapping": {
                "properties": {
                    "runOnce": {
                        "type": "runOnceDeploymentStrategy",
                        "description": "RunOnce Deployment strategy"
                    }
                }
            }
        },
        "deploymentStrategy-1": {
            "mapping": {
                "properties": {
                    "rolling": {
                        "type": "rollingDeploymentStrategy",
                        "description": "Rolling Deployment strategy"
                    }
                }
            }
        },
        "deploymentStrategy-2": {
            "mapping": {
                "properties": {
                    "canary": {
                        "type": "canaryDeploymentStrategy",
                        "description": "Canary Deployment strategy"
                    }
                }
            }
        },
        "deploymentStrategy": {
            "one-of": [
                "deploymentStrategy-0",
                "deploymentStrategy-1",
                "deploymentStrategy-2"
            ]
        },
        "preDeployHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where pre deploy steps will run"
                    }
                }
            }
        },
        "deployHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where deploy steps will run"
                    }
                }
            }
        },
        "routeTrafficHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where route traffic steps will run"
                    }
                }
            }
        },
        "postRouteTrafficHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where post route traffic steps will run"
                    }
                }
            }
        },
        "onSuccessOrFailureHook": {
            "mapping": {
                "properties": {
                    "failure": {
                        "type": "onFailureHook",
                        "description": "Runs on failure of any step"
                    },
                    "success": {
                        "type": "onSuccessHook",
                        "description": "Runs on success of all of the steps"
                    }
                }
            }
        },
        "onFailureHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where post on failure steps will run"
                    }
                }
            }
        },
        "onSuccessHook": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    },
                    "pool": {
                        "type": "pool",
                        "description": "Pool where on success steps will run"
                    }
                }
            }
        },
        "runOnceDeploymentStrategy": {
            "mapping": {
                "properties": {
                    "preDeploy": {
                        "type": "preDeployHook",
                        "description": "Pre deploy hook for runOnce deployment strategy"
                    },
                    "deploy": {
                        "type": "deployHook",
                        "description": "Deploy hook for runOnce deployment strategy"
                    },
                    "routeTraffic": {
                        "type": "routeTrafficHook",
                        "description": "Route traffic hook for runOnce deployment strategy"
                    },
                    "postRouteTraffic": {
                        "type": "postRouteTrafficHook",
                        "description": "Post route traffic hook for runOnce deployment strategy"
                    },
                    "on": {
                        "type": "onSuccessOrFailureHook",
                        "description": "On success or failure hook for runOnce deployment strategy"
                    }
                }
            }
        },
        "rollingDeploymentStrategy": {
            "mapping": {
                "properties": {
                    "maxParallel": {
                        "type": "nonEmptyString",
                        "description": "Maximum number of jobs running in parallel"
                    },
                    "preDeploy": {
                        "type": "preDeployHook",
                        "description": "Pre deploy hook for rolling deployment strategy"
                    },
                    "deploy": {
                        "type": "deployHook",
                        "description": "Deploy hook for rolling deployment strategy"
                    },
                    "routeTraffic": {
                        "type": "routeTrafficHook",
                        "description": "Route traffic hook for rolling deployment strategy"
                    },
                    "postRouteTraffic": {
                        "type": "postRouteTrafficHook",
                        "description": "Post route traffic hook for rolling deployment strategy"
                    },
                    "on": {
                        "type": "onSuccessOrFailureHook",
                        "description": "On success or failure hook for rolling deployment strategy"
                    }
                }
            }
        },
        "canaryDeploymentStrategy": {
            "mapping": {
                "properties": {
                    "increments": {
                        "type": "canaryDeploymentIncrements",
                        "description": "Maximum batch size for deployment"
                    },
                    "preDeploy": {
                        "type": "preDeployHook",
                        "description": "Pre deploy hook for canary deployment strategy"
                    },
                    "deploy": {
                        "type": "deployHook",
                        "description": "Deploy hook for canary deployment strategy"
                    },
                    "routeTraffic": {
                        "type": "routeTrafficHook",
                        "description": "Route traffic hook for canary deployment strategy"
                    },
                    "postRouteTraffic": {
                        "type": "postRouteTrafficHook",
                        "description": "Post route traffic hook for canary deployment strategy"
                    },
                    "on": {
                        "type": "onSuccessOrFailureHook",
                        "description": "On success or failure hook for canary deployment strategy"
                    }
                }
            }
        },
        "canaryDeploymentIncrements": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "phases": {
            "sequence": {
                "item-type": "phase"
            }
        },
        "phase-0": {
            "mapping": {
                "properties": {
                    "phase": {
                        "type": "referenceName",
                        "description": "ID of the phase",
                        "first-property": true,
                        "required": true
                    },
                    "dependsOn": {
                        "type": "jobDependsOn",
                        "description": "Any phases which must complete before this one"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name of the phase"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this phase"
                    },
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "queue": {
                        "type": "phaseQueueTarget",
                        "description": "Queue where this phase will run"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Phase-specific variables"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run in this phase"
                    }
                }
            }
        },
        "phase-1": {
            "mapping": {
                "properties": {
                    "phase": {
                        "type": "referenceName",
                        "description": "ID of the phase",
                        "first-property": true,
                        "required": true
                    },
                    "dependsOn": {
                        "type": "jobDependsOn",
                        "description": "Any phases which must complete before this one"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name of the phase"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this phase"
                    },
                    "continueOnError": {
                        "type": "jobContinueOnError",
                        "description": "Continue running even on failure?"
                    },
                    "server": {
                        "type": "phaseServerTarget",
                        "description": "True if this is an agent-less phase (runs on server)"
                    },
                    "variables": {
                        "type": "variables",
                        "description": "Phase-specific variables"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run in this phase"
                    }
                }
            }
        },
        "phase-2": {
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString",
                        "description": "Reference to a template for this phase",
                        "first-property": true,
                        "required": true
                    },
                    "parameters": {
                        "type": "azp-mapping",
                        "description": "Parameters used in a phase template"
                    }
                }
            }
        },
        "phase": {
            "one-of": [
                "phase-2"
            ]
        },
        "phaseQueueTarget-0": {
            "string": {}
        },
        "phaseQueueTarget-1": {
            "mapping": {
                "properties": {
                    "cancelTimeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for the phase to cancel before forcibly terminating it"
                    },
                    "container": {
                        "type": "nonEmptyString",
                        "description": "Container resource name"
                    },
                    "demands": {
                        "type": "phaseTargetDemands",
                        "description": "List of demands (for a private queue)"
                    },
                    "matrix": {
                        "type": "phaseTargetMatrix"
                    },
                    "name": {
                        "type": "azp-string",
                        "description": "Name of a queue"
                    },
                    "parallel": {
                        "type": "nonEmptyString",
                        "description": "Maximum number of parallel agent executions"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait before cancelling the phase"
                    },
                    "workspace": {
                        "type": "phaseTargetWorkspace"
                    }
                }
            }
        },
        "phaseQueueTarget": {
            "description": "Queue details",
            "one-of": [
                "phaseQueueTarget-0",
                "phaseQueueTarget-1"
            ]
        },
        "phaseServerTarget-0": {
            "string": {}
        },
        "phaseServerTarget-1": {
            "mapping": {
                "properties": {
                    "cancelTimeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for the job to cancel before forcibly terminating it"
                    },
                    "matrix": {
                        "type": "phaseTargetMatrix"
                    },
                    "parallel": {
                        "type": "nonEmptyString",
                        "description": "Maximum number of parallel agent executions"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait before cancelling the job"
                    }
                }
            }
        },
        "phaseServerTarget": {
            "one-of": [
                "phaseServerTarget-0",
                "phaseServerTarget-1"
            ]
        },
        "phaseTargetDemands-0": {
            "string": {}
        },
        "phaseTargetDemands-1": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "phaseTargetDemands": {
            "one-of": [
                "phaseTargetDemands-0",
                "phaseTargetDemands-1"
            ]
        },
        "phaseTargetWorkspace-clean": {
            "description": "Scorch the repo before fetching?",
            "allowed-values": [
                "outputs",
                "resources",
                "all"
            ]
        },
        "phaseTargetWorkspace": {
            "mapping": {
                "properties": {
                    "clean": {
                        "type": "phaseTargetWorkspace-clean",
                        "description": "Scorch the repo before fetching?"
                    }
                }
            }
        },
        "phaseTargetMatrix-0": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "phaseTargetMatrix-1": {
            "string": {}
        },
        "phaseTargetMatrix": {
            "description": "List of permutations of variable values to run",
            "one-of": [
                "phaseTargetMatrix-0",
                "phaseTargetMatrix-1"
            ]
        },
        "stepsTemplate": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Step-specific parameters"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    }
                }
            }
        },
        "steps": {
            "sequence": {
                "item-type": "step"
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "step-1": {
            "mapping": {
                "properties": {
                    "script": {
                        "type": "azp-string",
                        "description": "An inline script",
                        "first-property": true,
                        "required": true
                    },
                    "failOnStderr": {
                        "type": "azp-string",
                        "description": "Fail the task if output is sent to Stderr?"
                    },
                    "workingDirectory": {
                        "type": "azp-string",
                        "description": "Start the script with this working directory"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-2": {
            "mapping": {
                "properties": {
                    "powershell": {
                        "type": "azp-string",
                        "description": "Inline PowerShell or reference to a PowerShell file",
                        "first-property": true,
                        "required": true
                    },
                    "errorActionPreference": {
                        "type": "azp-string"
                    },
                    "failOnStderr": {
                        "type": "azp-string",
                        "description": "Fail the task if output is sent to Stderr?"
                    },
                    "ignoreLASTEXITCODE": {
                        "type": "azp-string",
                        "description": "Check the final exit code of the script to determine whether the step succeeded?"
                    },
                    "workingDirectory": {
                        "type": "azp-string",
                        "description": "Start the script with this working directory"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-3": {
            "mapping": {
                "properties": {
                    "pwsh": {
                        "type": "azp-string",
                        "description": "Inline PowerShell or reference to a PowerShell file",
                        "first-property": true,
                        "required": true
                    },
                    "errorActionPreference": {
                        "type": "azp-string"
                    },
                    "failOnStderr": {
                        "type": "azp-string",
                        "description": "Fail the task if output is sent to Stderr?"
                    },
                    "ignoreLASTEXITCODE": {
                        "type": "azp-string",
                        "description": "Check the final exit code of the script to determine whether the step succeeded?"
                    },
                    "workingDirectory": {
                        "type": "azp-string",
                        "description": "Start the script with this working directory"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-4": {
            "mapping": {
                "properties": {
                    "bash": {
                        "type": "azp-string",
                        "description": "An inline script",
                        "first-property": true,
                        "required": true
                    },
                    "failOnStderr": {
                        "type": "azp-string",
                        "description": "Fail the task if output is sent to Stderr?"
                    },
                    "workingDirectory": {
                        "type": "azp-string",
                        "description": "Start the script with this working directory"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-5-clean": {
            "description": "Scorch the repo before fetching?",
            "allowed-values": [
                "true",
                "false"
            ]
        },
        "step-5-workspaceRepo": {
            "description": "Make the repository root directory the default working directory?",
            "allowed-values": [
                "true",
                "false"
            ]
        },
        "step-5": {
            "mapping": {
                "properties": {
                    "checkout": {
                        "type": "azp-string",
                        "description": "Alias of the repository resource to check out or 'none'",
                        "first-property": true,
                        "required": true
                    },
                    "clean": {
                        "type": "step-5-clean",
                        "description": "Scorch the repo before fetching?"
                    },
                    "fetchDepth": {
                        "type": "azp-string",
                        "description": "Depth of Git graph to fetch"
                    },
                    "fetchFilter": {
                        "type": "azp-string",
                        "description": "Filter Git history"
                    },
                    "fetchTags": {
                        "type": "azp-string",
                        "description": "Fetch tags?"
                    },
                    "lfs": {
                        "type": "azp-string",
                        "description": "Fetch Git-LFS objects?"
                    },
                    "persistCredentials": {
                        "type": "azp-string",
                        "description": "Keep credentials available for later use?"
                    },
                    "submodules": {
                        "type": "azp-string",
                        "description": "Check out Git submodules?"
                    },
                    "path": {
                        "type": "azp-string",
                        "description": "Path of the repository to check out"
                    },
                    "sparseCheckoutDirectories": {
                        "type": "azp-string",
                        "description": "Directories for sparse checkout in cone mode and prioritized over sparseCheckoutPatterns if both properties are provided"
                    },
                    "sparseCheckoutPatterns": {
                        "type": "azp-string",
                        "description": "Patterns for sparse checkout in non-cone mode that are ignored if sparseCheckoutDirectories is provided"
                    },
                    "workspaceRepo": {
                        "type": "step-5-workspaceRepo",
                        "description": "Make the repository root directory the default working directory?"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-6": {
            "mapping": {
                "properties": {
                    "download": {
                        "type": "nonEmptyString",
                        "description": "Reference to the pipeline",
                        "first-property": true,
                        "required": true
                    },
                    "artifact": {
                        "type": "nonEmptyString",
                        "description": "Name of the artifact to download"
                    },
                    "patterns": {
                        "type": "nonEmptyString",
                        "description": "Pattern to download files from artifact"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-7": {
            "mapping": {
                "properties": {
                    "downloadBuild": {
                        "type": "nonEmptyString",
                        "description": "ID for the build resource",
                        "first-property": true,
                        "required": true
                    },
                    "artifact": {
                        "type": "azp-string",
                        "description": "Name of the artifact to download"
                    },
                    "path": {
                        "type": "azp-string",
                        "description": "Path to download the artifact into"
                    },
                    "patterns": {
                        "type": "azp-string",
                        "description": "Downloads the files which matches the patterns"
                    },
                    "inputs": {
                        "type": "mappingOfStringString",
                        "description": "Inputs for the task"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-8": {
            "mapping": {
                "properties": {
                    "getPackage": {
                        "type": "nonEmptyString",
                        "description": "ID for the package resource",
                        "first-property": true,
                        "required": true
                    },
                    "path": {
                        "type": "azp-string",
                        "description": "Path to download the package into"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-9": {
            "mapping": {
                "properties": {
                    "upload": {
                        "type": "azp-string",
                        "first-property": true,
                        "required": true
                    },
                    "artifact": {
                        "type": "azp-string"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-10": {
            "mapping": {
                "properties": {
                    "publish": {
                        "type": "azp-string",
                        "first-property": true,
                        "required": true
                    },
                    "artifact": {
                        "type": "azp-string"
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step-11": {
            "mapping": {
                "properties": {
                    "template": {
                        "type": "nonEmptyString",
                        "description": "Reference to a template for this step",
                        "first-property": true,
                        "required": true
                    },
                    "parameters": {
                        "type": "azp-mapping",
                        "description": "Parameters used in a step template"
                    }
                }
            }
        },
        "step-12": {
            "mapping": {
                "properties": {
                    "reviewApp": {
                        "type": "azp-string",
                        "first-property": true,
                        "required": true
                    },
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "step": {
            "one-of": [
                "task",
                "step-1",
                "step-2",
                "step-3",
                "step-4",
                "step-5",
                "step-6",
                "step-7",
                "step-8",
                "step-10",
                "step-11",
                "step-12"
            ]
        },
        "stepTarget-0": {
            "string": {}
        },
        "stepTarget-1-commands": {
            "description": "Set of allowed logging commands ('any' or 'restricted')",
            "allowed-values": [
                "any",
                "restricted"
            ]
        },
        "stepTarget-1": {
            "mapping": {
                "properties": {
                    "container": {
                        "type": "nonEmptyString",
                        "description": "Container to target (or 'host' for host machine)"
                    },
                    "commands": {
                        "type": "stepTarget-1-commands",
                        "description": "Set of allowed logging commands ('any' or 'restricted')"
                    },
                    "settableVariables": {
                        "type": "variableRestrictions",
                        "description": "Restrictions on which variables that can be set"
                    }
                }
            }
        },
        "stepTarget": {
            "description": "Step target",
            "one-of": [
                "stepTarget-0",
                "stepTarget-1"
            ]
        },
        "variableRestrictions-0": {
            "string": {
                "pattern": "^none$",
                "ignore-case": true
            }
        },
        "variableRestrictions-1": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "variableRestrictions": {
            "one-of": [
                "variableRestrictions-0",
                "variableRestrictions-1"
            ]
        },
        "jobDecoratorSteps": {
            "mapping": {
                "properties": {
                    "steps": {
                        "type": "tasks",
                        "description": "A list of steps to run in this job"
                    }
                }
            }
        },
        "tasks": {
            "sequence": {
                "item-type": "task"
            }
        },
        "taskBase": {
            "mapping": {
                "properties": {
                    "condition": {
                        "type": "azp-string",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "azp-boolean",
                        "description": "Continue running even on failure?"
                    },
                    "displayName": {
                        "type": "azp-string",
                        "description": "Human-readable name for the task"
                    },
                    "target": {
                        "type": "stepTarget",
                        "description": "Environment in which to run this task"
                    },
                    "enabled": {
                        "type": "azp-boolean",
                        "description": "Run this task when the job runs?"
                    },
                    "env": {
                        "type": "mappingOfStringString",
                        "description": "Variables to map into the process's environment"
                    },
                    "name": {
                        "type": "referenceName",
                        "description": "ID of the step"
                    },
                    "timeoutInMinutes": {
                        "type": "nonEmptyString",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "azp-string",
                        "description": "Number of retries if the task fails"
                    }
                }
            }
        },
        "jobContinueOnError": {
            "string": {}
        },
        "jobDependsOn-0": {
            "string": {}
        },
        "jobDependsOn-1": {
            "sequence": {
                "item-type": "azp-string"
            }
        },
        "jobDependsOn": {
            "one-of": [
                "jobDependsOn-0",
                "jobDependsOn-1"
            ]
        },
        "referenceName": {
            "string": {
                "pattern": "^[-_A-Za-z0-9]*$"
            }
        },
        "templateContext": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "boolean-0": {
            "string": {
                "pattern": "^true$",
                "ignore-case": true
            }
        },
        "boolean-1": {
            "string": {
                "pattern": "^y$",
                "ignore-case": true
            }
        },
        "boolean-2": {
            "string": {
                "pattern": "^yes$",
                "ignore-case": true
            }
        },
        "boolean-3": {
            "string": {
                "pattern": "^on$",
                "ignore-case": true
            }
        },
        "boolean-4": {
            "string": {
                "pattern": "^false$",
                "ignore-case": true
            }
        },
        "boolean-5": {
            "string": {
                "pattern": "^n$",
                "ignore-case": true
            }
        },
        "boolean-6": {
            "string": {
                "pattern": "^no$",
                "ignore-case": true
            }
        },
        "boolean-7": {
            "string": {
                "pattern": "^off$",
                "ignore-case": true
            }
        },
        "azp-boolean": {
            "one-of": [
                "boolean-0",
                "boolean-1",
                "boolean-2",
                "boolean-3",
                "boolean-4",
                "boolean-5",
                "boolean-6",
                "boolean-7"
            ]
        },
        "string_allowExpressions": {
            "string": {},
            "context": [
                "parameters",
                "variables"
            ]
        },
        "nonEmptyString": {
            "string": {
                "require-non-empty": true
            }
        },
        "sequenceOfNonEmptyString": {
            "sequence": {
                "item-type": "nonEmptyString"
            }
        },
        "sequenceOfString_allowExpressions": {
            "sequence": {
                "item-type": "string_allowExpressions"
            },
            "context": [
                "parameters",
                "variables"
            ]
        },
        "mappingOfStringString": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "any_allowExpressions-0": {
            "string": {}
        },
        "any_allowExpressions-1": {
            "sequence": {
                "item-type": "azp-any"
            }
        },
        "any_allowExpressions-2": {
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "any_allowExpressions": {
            "one-of": [
                "any_allowExpressions-0",
                "any_allowExpressions-1",
                "any_allowExpressions-2",
                "boolean",
                "null",
                "number"
            ],
            "context": [
                "parameters",
                "variables"
            ]
        },
        "task-task-0": {
            "description": "Run a PowerShell script on Linux, macOS, or Windows",
            "string": {
                "constant": "PowerShell@2",
                "ignore-case": true
            }
        },
        "task-task-1": {
            "description": "Run a PowerShell script",
            "string": {
                "constant": "PowerShell@1",
                "ignore-case": true
            }
        },
        "task-task-2": {
            "description": "Run a PowerShell script within an Azure environment",
            "string": {
                "constant": "AzurePowerShell@5",
                "ignore-case": true
            }
        },
        "task-task-3": {
            "description": "Run a PowerShell script within an Azure environment",
            "string": {
                "constant": "AzurePowerShell@2",
                "ignore-case": true
            }
        },
        "task-task-4": {
            "description": "Run a PowerShell script within an Azure environment",
            "string": {
                "constant": "AzurePowerShell@3",
                "ignore-case": true
            }
        },
        "task-task-5": {
            "description": "Run a PowerShell script within an Azure environment",
            "string": {
                "constant": "AzurePowerShell@1",
                "ignore-case": true
            }
        },
        "task-task-6": {
            "description": "Run a PowerShell script within an Azure environment",
            "string": {
                "constant": "AzurePowerShell@4",
                "ignore-case": true
            }
        },
        "task-task-7": {
            "description": "Run scripts and make changes to a MySQL Database",
            "string": {
                "constant": "MysqlDeploymentOnMachineGroup@1",
                "ignore-case": true
            }
        },
        "task-task-8": {
            "description": "Authentication task for the pip client used for installing Python distributions",
            "string": {
                "constant": "PipAuthenticate@1",
                "ignore-case": true
            }
        },
        "task-task-9": {
            "description": "Authentication task for the pip client used for installing Python distributions",
            "string": {
                "constant": "PipAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-10": {
            "description": "Build, test, and deploy with Apache Maven",
            "string": {
                "constant": "Maven@2",
                "ignore-case": true
            }
        },
        "task-task-11": {
            "description": "Build, test, and deploy with Apache Maven",
            "string": {
                "constant": "Maven@3",
                "ignore-case": true
            }
        },
        "task-task-12": {
            "description": "Build, test, and deploy with Apache Maven",
            "string": {
                "constant": "Maven@4",
                "ignore-case": true
            }
        },
        "task-task-13": {
            "description": "Build with Apache Maven",
            "string": {
                "constant": "Maven@1",
                "ignore-case": true
            }
        },
        "task-task-14": {
            "description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command",
            "string": {
                "constant": "DotNetCoreCLI@2",
                "ignore-case": true
            }
        },
        "task-task-15": {
            "description": "Build, test and publish using dotnet core command-line.",
            "string": {
                "constant": "DotNetCoreCLI@0",
                "ignore-case": true
            }
        },
        "task-task-16": {
            "description": "Build, test and publish using dotnet core command-line.",
            "string": {
                "constant": "DotNetCoreCLI@1",
                "ignore-case": true
            }
        },
        "task-task-17": {
            "description": "This task is deprecated. Use 'NuGet' instead.",
            "string": {
                "constant": "XamarinComponentRestore@0",
                "ignore-case": true
            }
        },
        "task-task-18": {
            "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
            "string": {
                "constant": "AzureRmWebAppDeployment@3",
                "ignore-case": true
            }
        },
        "task-task-19": {
            "description": "Update Azure App Service using Web Deploy / Kudu REST APIs",
            "string": {
                "constant": "AzureRmWebAppDeployment@2",
                "ignore-case": true
            }
        },
        "task-task-20": {
            "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
            "string": {
                "constant": "AzureRmWebAppDeployment@4",
                "ignore-case": true
            }
        },
        "task-task-21": {
            "description": "Deploy the web project to the AzureRM Web App using Web Deploy",
            "string": {
                "constant": "AzureRMWebAppDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-22": {
            "description": "Execute PowerShell scripts on remote machine(s)",
            "string": {
                "constant": "PowerShellOnTargetMachines@1",
                "ignore-case": true
            }
        },
        "task-task-23": {
            "description": "Execute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting",
            "string": {
                "constant": "PowerShellOnTargetMachines@3",
                "ignore-case": true
            }
        },
        "task-task-24": {
            "description": "Execute PowerShell scripts on remote machine(s)",
            "string": {
                "constant": "PowerShellOnTargetMachines@2",
                "ignore-case": true
            }
        },
        "task-task-25": {
            "description": "Publish any of the code coverage results from a build",
            "string": {
                "constant": "PublishCodeCoverageResults@2",
                "ignore-case": true
            }
        },
        "task-task-26": {
            "description": "Publish Cobertura or JaCoCo code coverage results from a build",
            "string": {
                "constant": "PublishCodeCoverageResults@1",
                "ignore-case": true
            }
        },
        "task-task-27": {
            "description": "Deprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
            "string": {
                "constant": "RunVisualStudioTestsusingTestAgent@1",
                "ignore-case": true
            }
        },
        "task-task-28": {
            "description": "Pause deployment and wait for intervention",
            "string": {
                "constant": "ManualIntervention@6",
                "ignore-case": true
            }
        },
        "task-task-29": {
            "description": "Pause deployment and wait for intervention",
            "string": {
                "constant": "ManualIntervention@7",
                "ignore-case": true
            }
        },
        "task-task-30": {
            "description": "Pause deployment and wait for manual intervention",
            "string": {
                "constant": "ManualIntervention@8",
                "ignore-case": true
            }
        },
        "task-task-31": {
            "description": "Install an Apple provisioning profile required to build on a macOS agent machine",
            "string": {
                "constant": "InstallAppleProvisioningProfile@1",
                "ignore-case": true
            }
        },
        "task-task-32": {
            "description": "Install an Apple provisioning profile required to build on a macOS agent",
            "string": {
                "constant": "InstallAppleProvisioningProfile@0",
                "ignore-case": true
            }
        },
        "task-task-33": {
            "description": "[DEPRECATED] Finish the analysis and upload the results to SonarQube",
            "string": {
                "constant": "SonarQubePostTest@1",
                "ignore-case": true
            }
        },
        "task-task-34": {
            "description": "Create and upload an sdist or wheel to a PyPI-compatible index using Twine",
            "string": {
                "constant": "PyPIPublisher@0",
                "ignore-case": true
            }
        },
        "task-task-35": {
            "description": "Run scripts with Knife commands on your Chef workstation",
            "string": {
                "constant": "ChefKnife@1",
                "ignore-case": true
            }
        },
        "task-task-36": {
            "description": "Find in cache or download a specific version of Go and add it to the PATH",
            "string": {
                "constant": "GoTool@0",
                "ignore-case": true
            }
        },
        "task-task-37": {
            "description": "Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
            "string": {
                "constant": "XcodePackageiOS@0",
                "ignore-case": true
            }
        },
        "task-task-38": {
            "description": "Get, build, or test a Go application, or run a custom Go command",
            "string": {
                "constant": "Go@0",
                "ignore-case": true
            }
        },
        "task-task-39": {
            "description": "Publish Pipeline Metadata to Evidence store",
            "string": {
                "constant": "PublishPipelineMetadata@0",
                "ignore-case": true
            }
        },
        "task-task-40": {
            "description": "Build, tag, push, or run Docker images, or run a Docker command",
            "string": {
                "constant": "Docker@0",
                "ignore-case": true
            }
        },
        "task-task-41": {
            "description": "Build or push Docker images, login or logout, start or stop containers, or run a Docker command",
            "string": {
                "constant": "Docker@2",
                "ignore-case": true
            }
        },
        "task-task-42": {
            "description": "Build, tag, push, or run Docker images, or run a Docker command",
            "string": {
                "constant": "Docker@1",
                "ignore-case": true
            }
        },
        "task-task-43": {
            "description": "Queue a job on a Jenkins server",
            "string": {
                "constant": "JenkinsQueueJob@2",
                "ignore-case": true
            }
        },
        "task-task-44": {
            "description": "Queue a job on a Jenkins server",
            "string": {
                "constant": "JenkinsQueueJob@1",
                "ignore-case": true
            }
        },
        "task-task-45": {
            "description": "Upload files using FTP",
            "string": {
                "constant": "FtpUpload@2",
                "ignore-case": true
            }
        },
        "task-task-46": {
            "description": "Upload files using FTP",
            "string": {
                "constant": "FtpUpload@1",
                "ignore-case": true
            }
        },
        "task-task-47": {
            "description": "Copy files to remote Windows machines",
            "string": {
                "constant": "WindowsMachineFileCopy@1",
                "ignore-case": true
            }
        },
        "task-task-48": {
            "description": "Copy files to remote Windows machines",
            "string": {
                "constant": "WindowsMachineFileCopy@2",
                "ignore-case": true
            }
        },
        "task-task-49": {
            "description": "[Deprecated]  Use Gradle",
            "string": {
                "constant": "AndroidBuild@1",
                "ignore-case": true
            }
        },
        "task-task-50": {
            "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
            "string": {
                "constant": "TwineAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-51": {
            "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
            "string": {
                "constant": "TwineAuthenticate@1",
                "ignore-case": true
            }
        },
        "task-task-52": {
            "description": "Deploy a website or web application using Web Deploy",
            "string": {
                "constant": "IISWebAppDeploymentOnMachineGroup@0",
                "ignore-case": true
            }
        },
        "task-task-53": {
            "description": "Run a Python file or inline script",
            "string": {
                "constant": "PythonScript@0",
                "ignore-case": true
            }
        },
        "task-task-54": {
            "description": "Install Helm and Kubernetes on an agent machine",
            "string": {
                "constant": "HelmInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-55": {
            "description": "Install Helm on an agent machine",
            "string": {
                "constant": "HelmInstaller@1",
                "ignore-case": true
            }
        },
        "task-task-56": {
            "description": "Install specific Node.js version to run node tasks",
            "string": {
                "constant": "NodeTaskRunnerInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-57": {
            "description": "[Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
            "string": {
                "constant": "XamarinLicense@1",
                "ignore-case": true
            }
        },
        "task-task-58": {
            "description": "This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
            "string": {
                "constant": "NuGetAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-59": {
            "description": "Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 6, or MSBuild >= 15.8.166.59604",
            "string": {
                "constant": "NuGetAuthenticate@1",
                "ignore-case": true
            }
        },
        "task-task-60": {
            "description": "Restore your nuget packages using dotnet CLI",
            "string": {
                "constant": "DownloadGitHubNugetPackage@1",
                "ignore-case": true
            }
        },
        "task-task-61": {
            "description": "Provides credentials for Azure Artifacts feeds and external maven repositories",
            "string": {
                "constant": "MavenAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-62": {
            "description": "Download key-values to task variables from Azure App Configuration",
            "string": {
                "constant": "AzureAppConfigurationExport@10",
                "ignore-case": true
            }
        },
        "task-task-63": {
            "description": "Use this task under deploy phase provider to create a resource dynamically",
            "string": {
                "constant": "ReviewApp@0",
                "ignore-case": true
            }
        },
        "task-task-64": {
            "description": "Acquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
            "string": {
                "constant": "JavaToolInstaller@1",
                "ignore-case": true
            }
        },
        "task-task-65": {
            "description": "Acquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
            "string": {
                "constant": "JavaToolInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-66": {
            "description": "Deploy to Chef environments by editing environment attributes",
            "string": {
                "constant": "Chef@1",
                "ignore-case": true
            }
        },
        "task-task-67": {
            "description": "Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
            "string": {
                "constant": "AzureFunctionApp@1",
                "ignore-case": true
            }
        },
        "task-task-68": {
            "description": "Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
            "string": {
                "constant": "AzureFunctionApp@2",
                "ignore-case": true
            }
        },
        "task-task-69": {
            "description": "Don't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like gulp and Grunt to authenticate with private registries.",
            "string": {
                "constant": "npmAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-70": {
            "description": "Build with MSBuild",
            "string": {
                "constant": "MSBuild@1",
                "ignore-case": true
            }
        },
        "task-task-71": {
            "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
            "string": {
                "constant": "PackerBuild@0",
                "ignore-case": true
            }
        },
        "task-task-72": {
            "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
            "string": {
                "constant": "PackerBuild@1",
                "ignore-case": true
            }
        },
        "task-task-73": {
            "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
            "string": {
                "constant": "NuGetPackager@0",
                "ignore-case": true
            }
        },
        "task-task-74": {
            "description": "Create a snapshot in an Azure App Configuration instance",
            "string": {
                "constant": "AzureAppConfigurationSnapshot@1",
                "ignore-case": true
            }
        },
        "task-task-75": {
            "description": "Install a specified version of Duffle for installing and managing CNAB bundles",
            "string": {
                "constant": "DuffleInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-76": {
            "description": "Automatically updates the versions of a packaged Service Fabric application.",
            "string": {
                "constant": "ServiceFabricUpdateAppVersions@1",
                "ignore-case": true
            }
        },
        "task-task-77": {
            "description": "Automatically update portions of application and service manifests in a packaged Azure Service Fabric application",
            "string": {
                "constant": "ServiceFabricUpdateManifests@2",
                "ignore-case": true
            }
        },
        "task-task-78": {
            "description": "Observe the configured Azure Monitor rules for active alerts",
            "string": {
                "constant": "AzureMonitor@1",
                "ignore-case": true
            }
        },
        "task-task-79": {
            "description": "Observe the configured classic Azure Monitor rules for active alerts",
            "string": {
                "constant": "AzureMonitor@0",
                "ignore-case": true
            }
        },
        "task-task-80": {
            "description": "Azure Pipepine Task for setting up Notation CLI, sign and verify with Notation",
            "string": {
                "constant": "Notation@0",
                "ignore-case": true
            }
        },
        "task-task-81": {
            "description": "Connect or disconnect an Azure virtual machine's network interface to a Load Balancer's back end address pool",
            "string": {
                "constant": "AzureNLBManagement@1",
                "ignore-case": true
            }
        },
        "task-task-82": {
            "description": "Run an Apache JMeter load test in the cloud",
            "string": {
                "constant": "ApacheJMeterLoadTest@1",
                "ignore-case": true
            }
        },
        "task-task-83": {
            "description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
            "string": {
                "constant": "DockerCompose@0",
                "ignore-case": true
            }
        },
        "task-task-84": {
            "description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
            "string": {
                "constant": "DockerCompose@1",
                "ignore-case": true
            }
        },
        "task-task-85": {
            "description": "Configure alerts on available metrics for an Azure resource (Deprecated)",
            "string": {
                "constant": "AzureMonitorAlerts@0",
                "ignore-case": true
            }
        },
        "task-task-86": {
            "description": "[Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
            "string": {
                "constant": "XamarinTestCloud@1",
                "ignore-case": true
            }
        },
        "task-task-87": {
            "description": "Deploy an Azure Service Fabric application to a cluster",
            "string": {
                "constant": "ServiceFabricDeploy@1",
                "ignore-case": true
            }
        },
        "task-task-88": {
            "description": "Build an Xcode workspace on Mac OS",
            "string": {
                "constant": "Xcode@2",
                "ignore-case": true
            }
        },
        "task-task-89": {
            "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
            "string": {
                "constant": "Xcode@5",
                "ignore-case": true
            }
        },
        "task-task-90": {
            "description": "Build an Xcode workspace on Mac OS",
            "string": {
                "constant": "Xcode@1",
                "ignore-case": true
            }
        },
        "task-task-91": {
            "description": "Build an Xcode workspace on macOS",
            "string": {
                "constant": "Xcode@3",
                "ignore-case": true
            }
        },
        "task-task-92": {
            "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
            "string": {
                "constant": "Xcode@4",
                "ignore-case": true
            }
        },
        "task-task-93": {
            "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
            "string": {
                "constant": "NuGetPublisher@0",
                "ignore-case": true
            }
        },
        "task-task-94": {
            "description": "Execute a work item query and check the number of items returned",
            "string": {
                "constant": "queryWorkItems@0",
                "ignore-case": true
            }
        },
        "task-task-95": {
            "description": "Deploy containers to Azure App Service",
            "string": {
                "constant": "AzureWebAppContainer@1",
                "ignore-case": true
            }
        },
        "task-task-96": {
            "description": "Deploy a SQL Server database using DACPAC or SQL scripts",
            "string": {
                "constant": "SqlDacpacDeploymentOnMachineGroup@0",
                "ignore-case": true
            }
        },
        "task-task-97": {
            "description": "Cache files between runs",
            "string": {
                "constant": "CacheBeta@1",
                "ignore-case": true
            }
        },
        "task-task-98": {
            "description": "Cache files between runs",
            "string": {
                "constant": "CacheBeta@0",
                "ignore-case": true
            }
        },
        "task-task-99": {
            "description": "Cache files between runs",
            "string": {
                "constant": "Cache@2",
                "ignore-case": true
            }
        },
        "task-task-100": {
            "description": "Build with the CMake cross-platform build system",
            "string": {
                "constant": "CMake@1",
                "ignore-case": true
            }
        },
        "task-task-101": {
            "description": "Test mobile app packages with Visual Studio Mobile Center.",
            "string": {
                "constant": "VSMobileCenterTest@0",
                "ignore-case": true
            }
        },
        "task-task-102": {
            "description": "Test app packages with Visual Studio App Center",
            "string": {
                "constant": "AppCenterTest@1",
                "ignore-case": true
            }
        },
        "task-task-103": {
            "description": "Download a secure file to the agent machine",
            "string": {
                "constant": "DownloadSecureFile@1",
                "ignore-case": true
            }
        },
        "task-task-104": {
            "description": "An Azure DevOps Task to build and deploy Azure Container Apps.",
            "string": {
                "constant": "AzureContainerApps@0",
                "ignore-case": true
            }
        },
        "task-task-105": {
            "description": "An Azure DevOps Task to build and deploy Azure Container Apps.",
            "string": {
                "constant": "AzureContainerApps@1",
                "ignore-case": true
            }
        },
        "task-task-106": {
            "description": "Use the specified version of Ruby from the tool cache, optionally adding it to the PATH",
            "string": {
                "constant": "UseRubyVersion@0",
                "ignore-case": true
            }
        },
        "task-task-107": {
            "description": "Run the Grunt JavaScript task runner",
            "string": {
                "constant": "Grunt@0",
                "ignore-case": true
            }
        },
        "task-task-108": {
            "description": "Deploy an Azure SQL Database using DACPAC or run scripts using SQLCMD",
            "string": {
                "constant": "SqlAzureDacpacDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-109": {
            "description": "Uses container-structure-test (https://github.com/GoogleContainerTools/container-structure-test) to validate the structure of an image based on four categories of tests - command tests, file existence tests, file content tests and metadata tests",
            "string": {
                "constant": "ContainerStructureTest@0",
                "ignore-case": true
            }
        },
        "task-task-110": {
            "description": "Deploy using MSDeploy, then create/update websites and app pools",
            "string": {
                "constant": "IISWebAppDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-111": {
            "description": "Run a load test in the cloud with Azure Pipelines",
            "string": {
                "constant": "CloudLoadTest@1",
                "ignore-case": true
            }
        },
        "task-task-112": {
            "description": "Install Kubectl on agent machine",
            "string": {
                "constant": "KubectlInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-113": {
            "description": "Run a command line script using Bash on Linux and macOS and cmd.exe on Windows",
            "string": {
                "constant": "CmdLine@2",
                "ignore-case": true
            }
        },
        "task-task-114": {
            "description": "Run a command line with arguments",
            "string": {
                "constant": "CmdLine@1",
                "ignore-case": true
            }
        },
        "task-task-115": {
            "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
            "string": {
                "constant": "NuGet@0",
                "ignore-case": true
            }
        },
        "task-task-116": {
            "description": "Container Build Task",
            "string": {
                "constant": "ContainerBuild@0",
                "ignore-case": true
            }
        },
        "task-task-117": {
            "description": "Installs or restores missing NuGet packages. Use NuGetAuthenticate@0 task for latest capabilities.",
            "string": {
                "constant": "NuGetInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-118": {
            "description": "Restores NuGet packages in preparation for a Visual Studio Build step.",
            "string": {
                "constant": "NuGetRestore@1",
                "ignore-case": true
            }
        },
        "task-task-119": {
            "description": "Restore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.",
            "string": {
                "constant": "NuGetCommand@2",
                "ignore-case": true
            }
        },
        "task-task-120": {
            "description": "Delay further execution of a workflow by a fixed time",
            "string": {
                "constant": "Delay@1",
                "ignore-case": true
            }
        },
        "task-task-121": {
            "description": "Build an iOS app with Xamarin on macOS",
            "string": {
                "constant": "XamariniOS@2",
                "ignore-case": true
            }
        },
        "task-task-122": {
            "description": "Build an iOS app with Xamarin on macOS",
            "string": {
                "constant": "XamariniOS@1",
                "ignore-case": true
            }
        },
        "task-task-123": {
            "description": "Publish test results to Azure Pipelines",
            "string": {
                "constant": "PublishTestResults@2",
                "ignore-case": true
            }
        },
        "task-task-124": {
            "description": "Publish test results to Azure Pipelines",
            "string": {
                "constant": "PublishTestResults@1",
                "ignore-case": true
            }
        },
        "task-task-125": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@2",
                "ignore-case": true
            }
        },
        "task-task-126": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@6",
                "ignore-case": true
            }
        },
        "task-task-127": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@1",
                "ignore-case": true
            }
        },
        "task-task-128": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@5",
                "ignore-case": true
            }
        },
        "task-task-129": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@3",
                "ignore-case": true
            }
        },
        "task-task-130": {
            "description": "Copy files to Azure Blob Storage or virtual machines",
            "string": {
                "constant": "AzureFileCopy@4",
                "ignore-case": true
            }
        },
        "task-task-131": {
            "description": "Index your source code and publish symbols to a file share or Azure Artifacts symbol server",
            "string": {
                "constant": "PublishSymbols@2",
                "ignore-case": true
            }
        },
        "task-task-132": {
            "description": "Index your source code and publish symbols to a file share",
            "string": {
                "constant": "PublishSymbols@1",
                "ignore-case": true
            }
        },
        "task-task-133": {
            "description": "Copy files or build artifacts to a remote machine over SSH",
            "string": {
                "constant": "CopyFilesOverSSH@0",
                "ignore-case": true
            }
        },
        "task-task-134": {
            "description": "Build using a Gradle wrapper script",
            "string": {
                "constant": "Gradle@2",
                "ignore-case": true
            }
        },
        "task-task-135": {
            "description": "Build using a Gradle wrapper script",
            "string": {
                "constant": "Gradle@3",
                "ignore-case": true
            }
        },
        "task-task-136": {
            "description": "Build using a Gradle wrapper script",
            "string": {
                "constant": "Gradle@1",
                "ignore-case": true
            }
        },
        "task-task-137": {
            "description": "Run a build using Gradle wrapper",
            "string": {
                "constant": "Gradle@0",
                "ignore-case": true
            }
        },
        "task-task-138": {
            "description": "Distribute app builds to testers and users via Visual Studio App Center",
            "string": {
                "constant": "AppCenterDistribute@1",
                "ignore-case": true
            }
        },
        "task-task-139": {
            "description": "Distribute app builds to testers and users via Visual Studio App Center",
            "string": {
                "constant": "AppCenterDistribute@2",
                "ignore-case": true
            }
        },
        "task-task-140": {
            "description": "Distribute app builds to testers and users via Visual Studio App Center",
            "string": {
                "constant": "AppCenterDistribute@3",
                "ignore-case": true
            }
        },
        "task-task-141": {
            "description": "Distribute app builds to testers and users via App Center",
            "string": {
                "constant": "AppCenterDistribute@0",
                "ignore-case": true
            }
        },
        "task-task-142": {
            "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
            "string": {
                "constant": "NuGetToolInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-143": {
            "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
            "string": {
                "constant": "NuGetToolInstaller@1",
                "ignore-case": true
            }
        },
        "task-task-144": {
            "description": "Download artifacts produced by a Jenkins job",
            "string": {
                "constant": "JenkinsDownloadArtifacts@1",
                "ignore-case": true
            }
        },
        "task-task-145": {
            "description": "Download artifacts produced by a Jenkins job",
            "string": {
                "constant": "JenkinsDownloadArtifacts@2",
                "ignore-case": true
            }
        },
        "task-task-146": {
            "description": "Update a function app with a Docker container",
            "string": {
                "constant": "AzureFunctionAppContainer@1",
                "ignore-case": true
            }
        },
        "task-task-147": {
            "description": "Decrypt a file using OpenSSL",
            "string": {
                "constant": "DecryptFile@1",
                "ignore-case": true
            }
        },
        "task-task-148": {
            "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
            "string": {
                "constant": "HelmDeploy@1",
                "ignore-case": true
            }
        },
        "task-task-149": {
            "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
            "string": {
                "constant": "HelmDeploy@0",
                "ignore-case": true
            }
        },
        "task-task-150": {
            "description": "Install an Apple certificate required to build on a macOS agent machine",
            "string": {
                "constant": "InstallAppleCertificate@2",
                "ignore-case": true
            }
        },
        "task-task-151": {
            "description": "Install an Apple certificate required to build on a macOS agent",
            "string": {
                "constant": "InstallAppleCertificate@1",
                "ignore-case": true
            }
        },
        "task-task-152": {
            "description": "Install an Apple certificate required to build on a macOS agent",
            "string": {
                "constant": "InstallAppleCertificate@0",
                "ignore-case": true
            }
        },
        "task-task-153": {
            "description": "Invoke an Azure Function",
            "string": {
                "constant": "AzureFunction@1",
                "ignore-case": true
            }
        },
        "task-task-154": {
            "description": "Invoke Azure function as a part of your process.",
            "string": {
                "constant": "AzureFunction@0",
                "ignore-case": true
            }
        },
        "task-task-155": {
            "description": "Install Open Policy Agent on agent machine",
            "string": {
                "constant": "OpenPolicyAgentInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-156": {
            "description": "Downloads a GitHub Release from a repository",
            "string": {
                "constant": "DownloadGitHubRelease@0",
                "ignore-case": true
            }
        },
        "task-task-157": {
            "description": "Run shell commands or a script on a remote machine using SSH",
            "string": {
                "constant": "SSH@0",
                "ignore-case": true
            }
        },
        "task-task-158": {
            "description": "Publish a local directory or file as a named artifact for the current pipeline",
            "string": {
                "constant": "PublishPipelineArtifact@0",
                "ignore-case": true
            }
        },
        "task-task-159": {
            "description": "Publish (upload) a file or directory as a named artifact for the current run",
            "string": {
                "constant": "PublishPipelineArtifact@1",
                "ignore-case": true
            }
        },
        "task-task-160": {
            "description": "[DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
            "string": {
                "constant": "SonarQubePreBuild@1",
                "ignore-case": true
            }
        },
        "task-task-161": {
            "description": "Download artifacts from a file share, like \\\\share\\drop",
            "string": {
                "constant": "DownloadFileshareArtifacts@1",
                "ignore-case": true
            }
        },
        "task-task-162": {
            "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
            "string": {
                "constant": "Kubernetes@0",
                "ignore-case": true
            }
        },
        "task-task-163": {
            "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
            "string": {
                "constant": "Kubernetes@1",
                "ignore-case": true
            }
        },
        "task-task-164": {
            "description": "Build and deploy an Azure IoT Edge image",
            "string": {
                "constant": "AzureIoTEdge@2",
                "ignore-case": true
            }
        },
        "task-task-165": {
            "description": "Deploy a Docker Compose application to an Azure Service Fabric cluster",
            "string": {
                "constant": "ServiceFabricComposeDeploy@0",
                "ignore-case": true
            }
        },
        "task-task-166": {
            "description": "Sign and align Android APK files",
            "string": {
                "constant": "AndroidSigning@1",
                "ignore-case": true
            }
        },
        "task-task-167": {
            "description": "Sign and align Android APK files",
            "string": {
                "constant": "AndroidSigning@2",
                "ignore-case": true
            }
        },
        "task-task-168": {
            "description": "Sign and align Android APK files",
            "string": {
                "constant": "AndroidSigning@3",
                "ignore-case": true
            }
        },
        "task-task-169": {
            "description": "Downloads an artifact associated with a pipeline",
            "string": {
                "constant": "DownloadPipelineArtifact@0",
                "ignore-case": true
            }
        },
        "task-task-170": {
            "description": "Download build and pipeline artifacts",
            "string": {
                "constant": "DownloadPipelineArtifact@2",
                "ignore-case": true
            }
        },
        "task-task-171": {
            "description": "Download a named artifact from a pipeline to a local path",
            "string": {
                "constant": "DownloadPipelineArtifact@1",
                "ignore-case": true
            }
        },
        "task-task-172": {
            "description": "Use the specified version of Python from the tool cache, optionally adding it to the PATH",
            "string": {
                "constant": "UsePythonVersion@0",
                "ignore-case": true
            }
        },
        "task-task-173": {
            "description": "Run a PowerShell script in the context of an Azure Service Fabric cluster connection",
            "string": {
                "constant": "ServiceFabricPowerShell@1",
                "ignore-case": true
            }
        },
        "task-task-174": {
            "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2 and later).",
            "string": {
                "constant": "VSTest@2",
                "ignore-case": true
            }
        },
        "task-task-175": {
            "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2 and later).",
            "string": {
                "constant": "VSTest@3",
                "ignore-case": true
            }
        },
        "task-task-176": {
            "description": "Run tests with Visual Studio test runner",
            "string": {
                "constant": "VSTest@1",
                "ignore-case": true
            }
        },
        "task-task-177": {
            "description": "Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
            "string": {
                "constant": "ManualValidation@1",
                "ignore-case": true
            }
        },
        "task-task-178": {
            "description": "Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
            "string": {
                "constant": "ManualValidation@0",
                "ignore-case": true
            }
        },
        "task-task-179": {
            "description": "Build with Apache Ant",
            "string": {
                "constant": "Ant@1",
                "ignore-case": true
            }
        },
        "task-task-180": {
            "description": "Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
            "string": {
                "constant": "DeployVisualStudioTestAgent@2",
                "ignore-case": true
            }
        },
        "task-task-181": {
            "description": "Deploy and configure Test Agent to run tests on a set of machines",
            "string": {
                "constant": "DeployVisualStudioTestAgent@1",
                "ignore-case": true
            }
        },
        "task-task-182": {
            "description": "Create and activate a Conda environment",
            "string": {
                "constant": "CondaEnvironment@0",
                "ignore-case": true
            }
        },
        "task-task-183": {
            "description": "This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
            "string": {
                "constant": "CondaEnvironment@1",
                "ignore-case": true
            }
        },
        "task-task-184": {
            "description": "Run a Windows command or batch script and optionally allow it to change the environment",
            "string": {
                "constant": "BatchScript@1",
                "ignore-case": true
            }
        },
        "task-task-185": {
            "description": "Install npm packages from GitHub.",
            "string": {
                "constant": "DownloadGithubNpmPackage@1",
                "ignore-case": true
            }
        },
        "task-task-186": {
            "description": "Build with MSBuild and set the Visual Studio version property",
            "string": {
                "constant": "VSBuild@1",
                "ignore-case": true
            }
        },
        "task-task-187": {
            "description": "Download Azure Key Vault secrets",
            "string": {
                "constant": "AzureKeyVault@1",
                "ignore-case": true
            }
        },
        "task-task-188": {
            "description": "Download Azure Key Vault secrets",
            "string": {
                "constant": "AzureKeyVault@2",
                "ignore-case": true
            }
        },
        "task-task-189": {
            "description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
            "string": {
                "constant": "UseDotNet@2",
                "ignore-case": true
            }
        },
        "task-task-190": {
            "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
            "string": {
                "constant": "DotNetCoreInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-191": {
            "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
            "string": {
                "constant": "DotNetCoreInstaller@1",
                "ignore-case": true
            }
        },
        "task-task-192": {
            "description": "Push key-values to an Azure App Configuration instance",
            "string": {
                "constant": "AzureAppConfigurationImport@10",
                "ignore-case": true
            }
        },
        "task-task-193": {
            "description": "Start, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service",
            "string": {
                "constant": "AzureAppServiceManage@0",
                "ignore-case": true
            }
        },
        "task-task-194": {
            "description": "Helps to install kubelogin",
            "string": {
                "constant": "KubeloginInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-195": {
            "description": "Install Azure Func Core Tools",
            "string": {
                "constant": "FuncToolsInstaller@0",
                "ignore-case": true
            }
        },
        "task-task-196": {
            "description": "Replace tokens with variable values in XML or JSON configuration files",
            "string": {
                "constant": "FileTransform@2",
                "ignore-case": true
            }
        },
        "task-task-197": {
            "description": "Replace tokens with variable values in XML or JSON configuration files",
            "string": {
                "constant": "FileTransform@1",
                "ignore-case": true
            }
        },
        "task-task-198": {
            "description": "Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
            "string": {
                "constant": "ExtractFiles@1",
                "ignore-case": true
            }
        },
        "task-task-199": {
            "description": "Build an Android app with Xamarin",
            "string": {
                "constant": "XamarinAndroid@1",
                "ignore-case": true
            }
        },
        "task-task-200": {
            "description": "Publish Build artifacts to the server or a file share",
            "string": {
                "constant": "PublishBuildArtifacts@0",
                "ignore-case": true
            }
        },
        "task-task-201": {
            "description": "[DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
            "string": {
                "constant": "CopyPublishBuildArtifacts@1",
                "ignore-case": true
            }
        },
        "task-task-202": {
            "description": "Download a package from a package management feed in Azure Artifacts",
            "string": {
                "constant": "DownloadPackage@0",
                "ignore-case": true
            }
        },
        "task-task-203": {
            "description": "Download a package from a package management feed in Azure Artifacts",
            "string": {
                "constant": "DownloadPackage@1",
                "ignore-case": true
            }
        },
        "task-task-204": {
            "description": "Deploy an Azure Resource Manager (ARM) template to a resource group and manage virtual machines",
            "string": {
                "constant": "AzureResourceGroupDeployment@2",
                "ignore-case": true
            }
        },
        "task-task-205": {
            "description": "Deploy, start, stop, delete Azure Resource Groups",
            "string": {
                "constant": "AzureResourceGroupDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-206": {
            "description": "Deploy an Azure Resource Manager (ARM) template to all the deployment scopes",
            "string": {
                "constant": "AzureResourceManagerTemplateDeployment@3",
                "ignore-case": true
            }
        },
        "task-task-207": {
            "description": "Invoke REST API as a part of your process.",
            "string": {
                "constant": "InvokeRESTAPI@0",
                "ignore-case": true
            }
        },
        "task-task-208": {
            "description": "Invoke a REST API as a part of your pipeline.",
            "string": {
                "constant": "InvokeRESTAPI@1",
                "ignore-case": true
            }
        },
        "task-task-209": {
            "description": "Compress files into .7z, .tar.gz, or .zip",
            "string": {
                "constant": "ArchiveFiles@2",
                "ignore-case": true
            }
        },
        "task-task-210": {
            "description": "Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.",
            "string": {
                "constant": "ArchiveFiles@1",
                "ignore-case": true
            }
        },
        "task-task-211": {
            "description": "Write a comment to your Github entity i.e. issue or a Pull Request (PR)",
            "string": {
                "constant": "GitHubComment@0",
                "ignore-case": true
            }
        },
        "task-task-212": {
            "description": "Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)",
            "string": {
                "constant": "CopyFiles@2",
                "ignore-case": true
            }
        },
        "task-task-213": {
            "description": "Copy files from source folder to target folder using minimatch patterns (The minimatch patterns will only match file paths, not folder paths)",
            "string": {
                "constant": "CopyFiles@1",
                "ignore-case": true
            }
        },
        "task-task-214": {
            "description": "Run your scripts and make changes to your Azure Database for MySQL",
            "string": {
                "constant": "AzureMysqlDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-215": {
            "description": "Install and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Azure Artifacts.",
            "string": {
                "constant": "Npm@1",
                "ignore-case": true
            }
        },
        "task-task-216": {
            "description": "Run an npm command. Use NpmAuthenticate@0 task for latest capabilities.",
            "string": {
                "constant": "Npm@0",
                "ignore-case": true
            }
        },
        "task-task-217": {
            "description": "[PREVIEW] Build and deploy an Azure Static Web App",
            "string": {
                "constant": "AzureStaticWebApp@0",
                "ignore-case": true
            }
        },
        "task-task-218": {
            "description": "Set up a Node.js environment and add it to the PATH, additionally providing proxy support",
            "string": {
                "constant": "UseNode@1",
                "ignore-case": true
            }
        },
        "task-task-219": {
            "description": "Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH",
            "string": {
                "constant": "NodeTool@0",
                "ignore-case": true
            }
        },
        "task-task-220": {
            "description": "Deploy a SQL Server database using DACPAC",
            "string": {
                "constant": "SqlServerDacpacDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-221": {
            "description": "Acquire the test platform from nuget.org or the tool cache. Satisfies the ‘vstest’ demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.",
            "string": {
                "constant": "VisualStudioTestPlatformInstaller@1",
                "ignore-case": true
            }
        },
        "task-task-222": {
            "description": "Sends a message to Azure Service Bus using a service connection (no agent is required)",
            "string": {
                "constant": "PublishToAzureServiceBus@1",
                "ignore-case": true
            }
        },
        "task-task-223": {
            "description": "Sends a message to Azure Service Bus using an Azure Resource Manager service connection (no agent is required)",
            "string": {
                "constant": "PublishToAzureServiceBus@2",
                "ignore-case": true
            }
        },
        "task-task-224": {
            "description": "Sends a message to azure service bus using a service connection (no agent required).",
            "string": {
                "constant": "PublishToAzureServiceBus@0",
                "ignore-case": true
            }
        },
        "task-task-225": {
            "description": "Use Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
            "string": {
                "constant": "KubernetesManifest@0",
                "ignore-case": true
            }
        },
        "task-task-226": {
            "description": "Use Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
            "string": {
                "constant": "KubernetesManifest@1",
                "ignore-case": true
            }
        },
        "task-task-227": {
            "description": "Download files that were saved as artifacts of a completed build",
            "string": {
                "constant": "DownloadBuildArtifacts@0",
                "ignore-case": true
            }
        },
        "task-task-228": {
            "description": "Download files that were saved as artifacts of a completed build",
            "string": {
                "constant": "DownloadBuildArtifacts@1",
                "ignore-case": true
            }
        },
        "task-task-229": {
            "description": "Install CocoaPods dependencies for Swift and Objective-C Cocoa projects",
            "string": {
                "constant": "CocoaPods@0",
                "ignore-case": true
            }
        },
        "task-task-230": {
            "description": "Deploy applications to Azure Spring Apps and manage deployments.",
            "string": {
                "constant": "AzureSpringCloud@0",
                "ignore-case": true
            }
        },
        "task-task-231": {
            "description": "Deploy an Azure Web App for Linux or Windows",
            "string": {
                "constant": "AzureWebApp@1",
                "ignore-case": true
            }
        },
        "task-task-232": {
            "description": "Run Azure CLI commands against an Azure subscription in a Shell script when running on Linux agent or Batch script when running on Windows agent.",
            "string": {
                "constant": "AzureCLI@1",
                "ignore-case": true
            }
        },
        "task-task-233": {
            "description": "Run a Shell or Batch script with Azure CLI commands against an azure subscription",
            "string": {
                "constant": "AzureCLI@0",
                "ignore-case": true
            }
        },
        "task-task-234": {
            "description": "Run Azure CLI commands against an Azure subscription in a PowerShell Core/Shell script when running on Linux agent or PowerShell/PowerShell Core/Batch script when running on Windows agent.",
            "string": {
                "constant": "AzureCLI@2",
                "ignore-case": true
            }
        },
        "task-task-235": {
            "description": "Create, edit, or delete a GitHub release",
            "string": {
                "constant": "GitHubRelease@1",
                "ignore-case": true
            }
        },
        "task-task-236": {
            "description": "Create, edit, or delete a GitHub release",
            "string": {
                "constant": "GitHubRelease@0",
                "ignore-case": true
            }
        },
        "task-task-237": {
            "description": "Use cURL to upload files with FTP, FTPS, SFTP, HTTP, and more.",
            "string": {
                "constant": "cURLUploader@1",
                "ignore-case": true
            }
        },
        "task-task-238": {
            "description": "Use cURL's supported protocols to upload files",
            "string": {
                "constant": "cURLUploader@2",
                "ignore-case": true
            }
        },
        "task-task-239": {
            "description": "Update/Add App settings an Azure Web App for Linux or Windows",
            "string": {
                "constant": "AzureAppServiceSettings@1",
                "ignore-case": true
            }
        },
        "task-task-240": {
            "description": "Download or publish Universal Packages",
            "string": {
                "constant": "UniversalPackages@0",
                "ignore-case": true
            }
        },
        "task-task-241": {
            "description": "Security and compliance assessment for Azure Policy",
            "string": {
                "constant": "AzurePolicyCheckGate@0",
                "ignore-case": true
            }
        },
        "task-task-242": {
            "description": "Deploy Azure function to Kubernetes cluster.",
            "string": {
                "constant": "AzureFunctionOnKubernetes@0",
                "ignore-case": true
            }
        },
        "task-task-243": {
            "description": "Deploy Azure function to Kubernetes cluster.",
            "string": {
                "constant": "AzureFunctionOnKubernetes@1",
                "ignore-case": true
            }
        },
        "task-task-244": {
            "description": "Run a shell script using Bash",
            "string": {
                "constant": "ShellScript@2",
                "ignore-case": true
            }
        },
        "task-task-245": {
            "description": "Run a Bash script on macOS, Linux, or Windows",
            "string": {
                "constant": "Bash@3",
                "ignore-case": true
            }
        },
        "task-task-246": {
            "description": "Run a shell script using bash",
            "string": {
                "constant": "ShellScript@1",
                "ignore-case": true
            }
        },
        "task-task-247": {
            "description": "Publish build artifacts to Azure Pipelines or a Windows file share",
            "string": {
                "constant": "PublishBuildArtifacts@1",
                "ignore-case": true
            }
        },
        "task-task-248": {
            "description": "Install an SSH key prior to a build or deployment",
            "string": {
                "constant": "InstallSSHKey@0",
                "ignore-case": true
            }
        },
        "task-task-249": {
            "description": "Deploy a virtual machine scale set image",
            "string": {
                "constant": "AzureVmssDeployment@0",
                "ignore-case": true
            }
        },
        "task-task-250": {
            "description": "Deploy a virtual machine scale set image",
            "string": {
                "constant": "AzureVmssDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-251": {
            "description": "Create or update Azure App Service using Azure PowerShell",
            "string": {
                "constant": "AzureWebPowerShellDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-252": {
            "description": "Authentication task for the conda client",
            "string": {
                "constant": "CondaAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-253": {
            "description": "Deploy an Azure Cloud Service",
            "string": {
                "constant": "AzureCloudPowerShellDeployment@2",
                "ignore-case": true
            }
        },
        "task-task-254": {
            "description": "Deploy an Azure Cloud Service",
            "string": {
                "constant": "AzureCloudPowerShellDeployment@1",
                "ignore-case": true
            }
        },
        "task-task-255": {
            "description": "Authentication task for the cargo client used for installing Cargo crates distribution",
            "string": {
                "constant": "CargoAuthenticate@0",
                "ignore-case": true
            }
        },
        "task-task-256": {
            "description": "Delete folders, or files matching a pattern",
            "string": {
                "constant": "DeleteFiles@1",
                "ignore-case": true
            }
        },
        "task-task-257": {
            "description": "Run the gulp Node.js streaming task-based build system",
            "string": {
                "constant": "gulp@0",
                "ignore-case": true
            }
        },
        "task-task-258": {
            "description": "Run the gulp Node.js streaming task-based build system",
            "string": {
                "constant": "gulp@1",
                "ignore-case": true
            }
        },
        "task-task-259": {
            "description": "Run a quick web performance test in the cloud with Azure Pipelines",
            "string": {
                "constant": "QuickPerfTest@1",
                "ignore-case": true
            }
        },
        "task-task-260": {
            "description": "Create or update websites, web apps, virtual directories, or application pools",
            "string": {
                "constant": "IISWebAppManagementOnMachineGroup@0",
                "ignore-case": true
            }
        },
        "task-task-261": {
            "description": "Install Docker CLI on agent machine.",
            "string": {
                "constant": "DockerInstaller@0",
                "ignore-case": true
            }
        },
        "task-task": {
            "string": {
                "require-non-empty": true
            }
        },
        "task-displayName": {
            "description": "Human-readable name for the task",
            "string": {}
        },
        "task-name": {
            "description": "ID of the task instance",
            "string": {
                "pattern": "^[_A-Za-z0-9]*$"
            }
        },
        "task-condition": {
            "description": "Evaluate this condition expression to determine whether to run this task",
            "string": {}
        },
        "task-continueOnError": {
            "description": "Continue running the parent job even on failure?",
            "one-of": [
                "azp-boolean",
                "boolean"
            ]
        },
        "task-enabled": {
            "description": "Run this task when the job runs?",
            "string": {}
        },
        "task-retryCountOnTaskFailure": {
            "description": "Number of retries if the task fails",
            "one-of": [
                "azp-number",
                "number"
            ]
        },
        "task-timeoutInMinutes": {
            "description": "Time to wait for this task to complete before the server kills it",
            "one-of": [
                "azp-number",
                "number"
            ]
        },
        "task-inputs": {
            "description": "Task-specific inputs",
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "task-env": {
            "description": "Variables to map into the process's environment",
            "mapping": {
                "properties": {},
                "loose-key-type": "string",
                "loose-value-type": "any"
            }
        },
        "task": {
            "mapping": {
                "properties": {
                    "task": {
                        "type": "task-task",
                        "first-property": true,
                        "required": true
                    },
                    "displayName": {
                        "type": "task-displayName",
                        "description": "Human-readable name for the task"
                    },
                    "name": {
                        "type": "task-name",
                        "description": "ID of the task instance"
                    },
                    "condition": {
                        "type": "task-condition",
                        "description": "Evaluate this condition expression to determine whether to run this task"
                    },
                    "continueOnError": {
                        "type": "task-continueOnError",
                        "description": "Continue running the parent job even on failure?"
                    },
                    "enabled": {
                        "type": "task-enabled",
                        "description": "Run this task when the job runs?"
                    },
                    "retryCountOnTaskFailure": {
                        "type": "task-retryCountOnTaskFailure",
                        "description": "Number of retries if the task fails"
                    },
                    "timeoutInMinutes": {
                        "type": "task-timeoutInMinutes",
                        "description": "Time to wait for this task to complete before the server kills it"
                    },
                    "inputs": {
                        "type": "task-inputs",
                        "description": "Task-specific inputs"
                    },
                    "env": {
                        "type": "task-env",
                        "description": "Variables to map into the process's environment"
                    },
                    "target": "stepTarget"
                }
            }
        },
        "pipeline-root": {
            "one-of": [
                "pipeline-0",
                "pipeline-1",
                "pipeline-2",
                "pipeline-4"
            ]
        },
        "variable-template-root": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "variables": {
                        "type": "variables"
                    }
                }
            }
        },
        "step-template-root": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters",
                        "description": "Step-specific parameters"
                    },
                    "steps": {
                        "type": "steps",
                        "description": "A list of steps to run"
                    }
                }
            }
        },
        "job-template-root": {
            "one-of": [
                "jobsTemplate-0"
            ]
        },
        "stage-template-root": {
            "mapping": {
                "properties": {
                    "parameters": {
                        "type": "templateParameters"
                    },
                    "stages": {
                        "type": "stages"
                    }
                }
            }
        },
        "extend-template-root": {
            "one-of": [
                "extendsTemplate-0",
                "extendsTemplate-1",
                "extendsTemplate-2",
                "extendsTemplate-3"
            ]
        }
    }
}
