using System;
using GitHub.Runner.Common;
using GitHub.Runner.Worker;
using Moq;
using Xunit;

namespace GitHub.Runner.Common.Tests.Worker
{
    public class FeatureManagerL0
    {
        // Create a mock interface for Variables
        public interface IVariables
        {
            bool? GetBoolean(string name);
        }

        [Fact]
        public void IsUseNode24ByDefaultEnabled_ReturnsCorrectValue()
        {
            // Arrange
            var mockVariables = new Mock<IVariables>();
            mockVariables.Setup(x => x.GetBoolean(Constants.Runner.NodeMigration.UseNode24ByDefaultFlag))
                .Returns(true);
            
            // Act
            bool result = IsUseNode24ByDefaultEnabled(mockVariables.Object);
            
            // Assert
            Assert.True(result);
        }
        
        [Fact]
        public void IsUseNode24ByDefaultEnabled_ReturnsFalseWhenNotSet()
        {
            // Arrange
            var mockVariables = new Mock<IVariables>();
            mockVariables.Setup(x => x.GetBoolean(Constants.Runner.NodeMigration.UseNode24ByDefaultFlag))
                .Returns((bool?)null);
            
            // Act
            bool result = IsUseNode24ByDefaultEnabled(mockVariables.Object);
            
            // Assert
            Assert.False(result);
        }
        
        [Fact]
        public void IsUseNode24ByDefaultEnabled_ReturnsFalseWhenNull()
        {
            // Act
            bool result = IsUseNode24ByDefaultEnabled(null);
            
            // Assert
            Assert.False(result);
        }
        
        [Fact]
        public void IsRequireNode24Enabled_ReturnsCorrectValue()
        {
            // Arrange
            var mockVariables = new Mock<IVariables>();
            mockVariables.Setup(x => x.GetBoolean(Constants.Runner.NodeMigration.RequireNode24Flag))
                .Returns(true);
            
            // Act
            bool result = IsRequireNode24Enabled(mockVariables.Object);
            
            // Assert
            Assert.True(result);
        }
        
        [Fact]
        public void IsRequireNode24Enabled_ReturnsFalseWhenNotSet()
        {
            // Arrange
            var mockVariables = new Mock<IVariables>();
            mockVariables.Setup(x => x.GetBoolean(Constants.Runner.NodeMigration.RequireNode24Flag))
                .Returns((bool?)null);
            
            // Act
            bool result = IsRequireNode24Enabled(mockVariables.Object);
            
            // Assert
            Assert.False(result);
        }
        
        [Fact]
        public void IsRequireNode24Enabled_ReturnsFalseWhenNull()
        {
            // Act
            bool result = IsRequireNode24Enabled(null);
            
            // Assert
            Assert.False(result);
        }
        
        // Implementation of methods to test
        private bool IsFeatureEnabled(IVariables variables, string featureFlag)
        {
            return variables?.GetBoolean(featureFlag) ?? false;
        }
        
        private bool IsUseNode24ByDefaultEnabled(IVariables variables)
        {
            return IsFeatureEnabled(variables, Constants.Runner.NodeMigration.UseNode24ByDefaultFlag);
        }
        
        private bool IsRequireNode24Enabled(IVariables variables)
        {
            return IsFeatureEnabled(variables, Constants.Runner.NodeMigration.RequireNode24Flag);
        }
    }
}
