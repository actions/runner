{
  "scanProfile": {
    "Name": "FullTextProvider",
    "Description": "Scan plain text string streams.",
    "LocateByLineNumber": false,
    "InclusiveCredInfoTags": [
      "Any"
    ],
    "ExclusiveCredInfoTags": [
      "Scope_Tuning"
    ],
    "InclusivePatternTags": [
      "Quality_Production"
    ],
    "ExclusivePatternTags": [
      "ProviderType_FileSystemOnly",
      "ProviderType_Disabled",
      "ProviderType_Adhoc",
      "ProviderType_CEPOnly"
    ]
  },
  "patterns": [
    {
      "Name": "AnsibleVaultData",
      "Description": "Ansible Vault data",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "FileContent=Content.Regex(\\$ANSIBLE_VAULT;\\d+\\.\\d+;AES256\\s+\\d+)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-GENERAL0150": []
      }
    },
    {
      "Name": "AzurePowerShellTokenCache",
      "Description": "Azure PowerShell Token Cache",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "CachedToken=Content.Regex([\"']TokenCache[\"']\\s*:\\s*\\{\\s*[\"']CacheData[\"']\\s*:\\s*[\"'][a-z0-9/\\+]{86})",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-AZURE0140": [
          "MatchContext.Contains(VersionProfile)",
          "MatchContext.Contains(ExtendedProperties)"
        ]
      }
    },
    {
      "Name": "Base64EncodedStringLiteral",
      "Description": "Base64 encoded string literal",
      "Tags": [
        "Performance_Slow",
        "Quality_Production",
        "Version_v1",
        "ProviderType_CEPDisabled"
      ],
      "ScopeMatchingExpressions": {
        "FullTextProvider": [
          "GenevaFPs=Location.NotRegex(AsmPubKey|AsmSpInvKey)"
        ]
      },
      "ScannerMatchingExpression": "DataBlock=Content.Regex((^|[\"'>;=\\s#])(?<DataBlock>(?-i)MI(?i)[a-z0-9/+\\r\\n\\u0085\\s\"',\\\\]{200,20000}[a-z0-9/+]={0,2}))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-AZURE0010": [
          "AttributeName=MatchPrefix.Regex(ManagementCertificate\\s*=\\s*)",
          "SubId=MatchContext.Regex(<Subscription\\s+id\\s*=\\s*\"(?<SubId>[0-9a-z]{8}-([0-9a-z]{4}-){3}[0-9a-z]{12}))",
          "MatchLines.Extract(Extractors.Base64EncodedCertificate, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0040": [
          "HostName=MatchPrefix.Regex([\"'=,](?<HostName>[^\"'=\\.,]+)\\.redis\\.cache\\.windows\\.net)",
          "PasswordFieldName=MatchPrefix.Regex(Password=)"
        ],
        "CSCAN-AZURE0020": [
          "ServerName=MatchContext.Regex((tcp:)?(?<ServerName>[a-z\\-_0-9:\\.]+(\\.database(\\.secure)?\\.windows\\.net|\\.cloudapp\\.net|\\.database\\.usgovcloudapi\\.net|\\.database\\.chinacloudapi\\.cn|\\.database.cloudapi.de)))",
          "PasswordFieldName=MatchPrefix.Regex(Password=)"
        ],
        "CSCAN-AZURE0070": [
          "EndpointSuffix=MatchPostfix.Regex(^\\Wcore\\.windows\\.net)"
        ],
        "CSCAN-GENERAL0060": [
          "PropertyName=MatchPrefix.Regex(Password|AccountKey|StoreConnectionString|ApiKey)",
          "Encoding=MatchValue.Regex(^(?-i)MII)"
        ],
        "CSCAN-GENERAL0020:Base64StringLiteral": [
          "MatchLines.Extract(Extractors.Base64EncodedCertificate, Microsoft.Security.CredScan.KnowledgeBase)"
        ]
      }
    },
    {
      "Name": "JsonWebToken",
      "Description": "Json Web Token",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "JwtToken=Content.Regex((?-i)(?<JwtToken>eyJ(?i)[a-z0-9\\-_%]+\\.(?-i)eyJ(?i)[a-z0-9\\-_%]+\\.[a-z0-9\\-_%]+)|([rR]efresh_?[tT]oken|REFRESH_?TOKEN)[\"']?\\s*[:=]{1,2}\\s*[\"']?(?<JwtToken>(\\w+-)+\\w+[\"']?))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "Placeholder=MatchValue.Regex((Access|Ref(re|er)sh).?Token)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-AZURE0140": [
          "MatchValue.Extract(Extractors.AadAccessToken, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0140:RefreshToken": [
          "MatchPrefix.Contains(refresh)"
        ]
      }
    },
    {
      "Name": "CommonDefaultPassword",
      "Description": "Common Default Password",
      "Tags": [
        "ProviderType_ContainsSecret",
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Password=Content.Regex(T!T@n1130|P0rsche911|coMmac!12|pass@word1|rdPa\\$\\$w0rd|iis6!dfu|p@ssword1|Pa\\$\\$word1|!!123ab|P@ssw0rd1|user@123|abc@123|Password@123|rdP@\\$\\$w0rd|homer?rocks|Pa\\$\\$w0rd1?|!Password1|Pa55word1|P@\\$\\$w0rd1|Passw0rd1|J\\$p1ter|rdPassW0rd|Pass4Sales|rdPa\\$\\$word|!P@ssW0rd1|WS2012R2R0cks!|DSFS0319Test|March2010M2!|Password~1|\\$mCertPwd|Pa\\$\\$word!|2012\\$erver!|2008\\$erver!|#Bugsfor\\$|ITG2Install!|rdPa\\$\\$w0rd|TitanPwd%|ChocoCheese!|n1130@T!T|Micr0s0ft|test1test!|123@tieorg|homerocks|IWantYouToTripLikeIDo!\\?|(?-i)UL0brlXlp_r8vG6iiRvCcsFDfu6bJ6KK|7\\-Tdh3Klrec4dJbOyONDOkCQ84BWN1JN|Y29NbWFjITEy(?i)|elvis1|S_MSLocal~!@#)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "PasswordDenylist=MatchContext.Regex(forbiden|well\\-?known|disallowed)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-MSFT0090": []
      }
    },
    {
      "Name": "CommonDefaultPasswordLessComplexity",
      "Description": "Common Default Password with Less Complexity",
      "Tags": [
        "ProviderType_ContainsSecret",
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Password=Content.Regex(admin123)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "PasswordDenylist=MatchContext.Regex(forbiden|well\\-?known)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-MSFT0090": [
          "MatchPrefix.Regex((Password|Pwd|Secret)\\W)"
        ]
      }
    },
    {
      "Name": "SlackTokens",
      "Description": "Slack user/bot/workspace token",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "FileContent=Content.Regex(xox[pbar]\\-[a-z0-9\\-]+)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-GENERAL0130": []
      }
    },
    {
      "Name": "SymmetricKey128",
      "Description": "Base64 encoded 128 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\._\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{22}==)([^\\w/\\+\\.\\$]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "PropertyHashKey=MatchPrefix.Regex(Initial ?Catalog|Data ?Source|thumbprint|server.name)",
        "Ambiguity=MatchContext.ContainsAny(bitmap|encodedimage)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0130": [
          "MatchLongPrefix.Regex((api|client|app(lication)?)[_\\- ]?(key|secret)[^,]|ida:password)"
        ],
        "CSCAN-GENERAL0130:AccessControl3": [
          "MatchContext.Contains(IssuerSecret)"
        ],
        "CSCAN-GENERAL0060": [
          "MatchPrefix.Regex(user(name)?[ -~\\s]{0,70}(secret|password))"
        ]
      }
    },
    {
      "Name": "SymmetricKey240",
      "Description": "Base64 encoded 240 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\.\\-\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{40})([^\\w/\\+\\.\\-\\$,\\\\]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "MatchValue.NotRegex([/\\+])"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AWS0010": [
          "AWS=MatchLongPrefix.Regex([^a-z0-9]AWS|Amazon)",
          "MatchLongPrefix.Contains(Secret)",
          "MatchLongPrefix.Regex(Access.?Key)"
        ]
      }
    },
    {
      "Name": "SymmetricKey256",
      "Description": "Base64 encoded 256 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\.\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{43}=)([^\\w/\\+\\.\\$]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "PropertyHashKey=MatchPrefix.Regex(Initial ?Catalog|Data ?Source|thumbprint|server.name|EcsETag)",
        "Ambiguity=MatchContext.Regex((bitmap|encodedimage)\\W)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
          "KeyPlaceholder=MatchValue.Contains(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg=)"
        ],
        "CSCAN-TRIAGE0023": [
          "MatchPrefix.Regex(encdata|encrypted)",
          "MatchContext.Regex(@encrypted|encrypteddata|[^;]\\s?encrypt\\s*=\\s*true)"
        ],
        "CSCAN-AZURE0060": [
          "MatchPrefix.Contains(core.windows.net)",
          "MatchContext.Extract(Extractors.ValidSasToken, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0060:Code": [
          "MatchPrefixInline.Regex((?-i)SAS\\W|Sas\\W)"
        ],
        "CSCAN-AZURE0061": [
          "MatchPrefix.Contains(sig=)",
          "ResourceType=MatchPrefix.Regex(\\.(vhd|cspkg|azpkg|wacontent|ispac|dacpac|jar|pfx|pvk|keystore|p12|pkcs12|pem|key|priv|ini|settings|config)\\?)"
        ],
        "CSCAN-AZURE0050": [
          "MatchContext.Contains(SharedAccessKey=)",
          "HostName=MatchContext.Regex(HostName=(?<HostName>[^=\\.;]+)\\.azure-devices\\.net)",
          "KeyName=MatchContext.Regex(SharedAccessKeyName=(?<KeyName>[^=;'\"]+))"
        ],
        "CSCAN-AZURE0050:Partial": [
          "MatchContext.Regex(iotHub)"
        ],
        "CSCAN-AZURE0030": [
          "HostName=MatchContext.Regex((Endpoint=sb://|'|\")(?<HostName>[^=\\.;]+)\\.servicebus\\.windows\\.net)",
          "MatchContext.Regex(Shared(Access(Policy)?Key|SecretValue)\\s?=)",
          "MatchContext.Regex(Shared(Access(Key|Policy)Name|SecretIssuer)\\s?=)"
        ],
        "CSCAN-AZURE0030:Partial": [
          "MatchContext.Regex(ServiceBus(Namespace|(SaS|SharedAccess(Policy)?)Key))"
        ],
        "CSCAN-AZURE0040": [
          "FiledName=MatchPrefix.Regex(Password\\s*[:=]+\\s*[\"']?$)",
          "HostName=MatchContext.Regex(([\"']|=)(?<HostName>[^\"'=\\.,]+)\\.redis\\.cache\\.windows\\.net)"
        ],
        "CSCAN-AZURE0040:Partial": [
          "MatchContext.Contains(New-AzureRedisCache)"
        ],
        "CSCAN-AZURE0130": [
          "MatchContext.Regex((SharedAccess(Policy)?|SAS|Primary|Secondary)Key\\W|SharedAccessSignature\\W|SharedKey\\W)"
        ],
        "CSCAN-AZURE0130:Prefix": [
          "MatchPrefix.Regex(((SharedAccess(Policy)?|SAS|Primary|Secondary)Key|SharedAccessSignature|SharedKey)[ -~]{0,50}$)"
        ],
        "CSCAN-AZURE0130:Partial": [
          "MatchContext.Regex(SecretIssuer)",
          "MatchContext.Regex(SecretValue)"
        ],
        "CSCAN-AZURE0130:NotificationHub": [
          "MatchContext.Regex(RootManageSharedAccessKey)"
        ],
        "CSCAN-AZURE0130:MediaServices": [
          "MatchContext.Contains(MediaServices)"
        ],
        "CSCAN-AZURE0130:AccessControl": [
          "MatchContext.Contains(accesscontrol.windows.net)"
        ],
        "CSCAN-GENERAL0130": [
          "MatchLongPrefix.Regex((api|client|app(lication)?)[_\\- ]?(key|secret)[^,]|ida:password)"
        ],
        "CSCAN-GENERAL0130:ApiClient": [
          "MatchContext.Contains(ida:)",
          "MatchContext.Contains(issuer)",
          "MatchContext.Contains(Api)",
          "MatchContext.Regex(\\WAad)"
        ],
        "CSCAN-GENERAL0130:Code": [
          "MatchPrefix.Regex((Get|Access)_?Token[^a-z])"
        ],
        "CSCAN-GENERAL0130:Config": [
          "Tenant=MatchLines.Contains(microsoft.onmicrosoft.com)",
          "AppId=MatchLines.Regex(\\W[\\<\\(\\[\\{]?[a-f0-9]{8}[\\-_]?([a-f0-9]{4}[\\-_]?){3}[a-f0-9]{12}[\\>\\)\\]\\}]?\\W)"
        ],
        "CSCAN-GENERAL0130:AccessControl2": [
          "MatchContext.Contains(Namespace)",
          "KeyName=MatchContext.Contains(ACSKey)",
          "MatchContext.Contains(Issuer)"
        ],
        "CSCAN-GENERAL0130:AccessControl3": [
          "MatchContext.Regex((IssuerSecret|Management.?Key)\\W)"
        ],
        "CSCAN-GENERAL0060": [
          "MatchPrefix.Regex(user(name)?[ -~\\s]{0,70}(secret|password))"
        ],
        "CSCAN-GENERAL0060:ProductionKey": [
          "MatchPrefix.Contains(ProductKey)"
        ],
        "CSCAN-GENERAL0140:Aws": [
          "MatchContext.Regex([^a-z0-9]sse\\-?c[^a-z0-9])"
        ],
        "CSCAN-GENERAL0140:EncryptionKey": [
          "Algor=MatchContext.Regex(aes256|RijndaelManaged256)",
          "MatchContext.Regex((start|end)date)",
          "MatchContext.Regex(\\Wiv\\W)"
        ],
        "CSCAN-GENERAL0140:SymmetricKey": [
          "MatchContext.Regex((Verification|Symmetric)Key\\W)"
        ],
        "CSCAN-GENERAL0140": [
          "MatchPrefixInline.Regex((?-i)(KEY|(K|k)ey)(?i)\\d?\\s*=\\s*[\"']?$|[^ ](?-i)(KEY|(K|k)ey)(?i)\\d?[^a-eg-oqrtuw-z0-9\\./\\+,]|password[^a-eg-oqrtuw-z,]|[a-z]{3}(?-i)(PWD|(P|p)wd)(?i)\\d?[^a-eg-oqrtuw-z0-9\\./\\+,]|passphrase|tokens?[^a-z,]|SymmetricKey[^a-z,])",
          "MatchLongPrefix.Regex((secret|credential)s?[^a-eg-oqrtuw-z,])"
        ]
      }
    },
    {
      "Name": "SymmetricKey256B32",
      "Description": "Base32 encoded 256 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\._\\-\\$,\\\\](?<SymmetricKey>(?-i)[a-z2-7]{52}(?i))(?<=[0-9]+[a-z]+[0-9]+.{0,49})([^\\w/\\+\\.\\-\\$,]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
        "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-AZURE0100": [
          "PassCheckSum=MatchValue.Extract(Extractors.AzureDevOpsPAT, Microsoft.Security.CredScan.KnowledgeBase)"
        ]
      }
    },
    {
      "Name": "SymmetricKey256UrlEncoded",
      "Description": "Url Encoded 256 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\._\\-\\$,\\\\%](?<SymmetricKey>[a-z0-9%]{43,63}%3d))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "NotAccessKey=MatchValue.Regex(%2[^bf])"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-AZURE0061": [
          "SasQueryString=MatchPrefix.Contains(sig=)",
          "ResourceType=MatchPrefix.Regex(\\.(?<ResourceType>vhd|cspkg|azpkg|wacontent|ispac|dacpac|jar|pfx|pvk|keystore|p12|pkcs12|pem|key|priv|ini|settings|config)\\?)"
        ],
        "CSCAN-AZURE0060": [
          "MatchPrefix.Contains(core.windows.net)",
          "MatchContext.Extract(Extractors.ValidSasToken, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0130": [
          "Endpoint=MatchPrefix.Contains(azure-automation)",
          "Token=MatchPrefixInline.Regex(token(.{1,3})?$)"
        ]
      }
    },
    {
      "Name": "SymmetricKey320",
      "Description": "Base64 encoded 320 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\.\\-\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{54}={2})([^\\w/\\+\\.\\-\\$,\\\\]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0120": [
          "MatchLongPrefix.Regex(azurewebsites\\.net/api/[a-z][a-z0-9\\-_]{1,128}\\?code=)"
        ],
        "CSCAN-AZURE0120:Code": [
          "DomainName=MatchLongPrefix.Regex(azurewebsites\\.net/api/)",
          "MatchLongPrefix.Regex(code)",
          "MatchLongPrefix.Regex(ApiKey)"
        ],
        "CSCAN-AZURE0120:HttpRequest": [
          "HeaderName=MatchLongPrefix.Contains(x-functions-key)"
        ],
        "CSCAN-GENERAL0130": [
          "MatchLongPrefix.Regex((api|client|app(lication)?)[_\\- ]?(key|secret)[^,]|ida:password)"
        ]
      }
    },
    {
      "Name": "SymmetricKey320UrlEncoded",
      "Description": "Url Encoded 320 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\.\\-\\$,\\\\%](?<SymmetricKey>[a-z0-9%]{54,74}(%3d){2}))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "NotAccessKey=MatchValue.Regex(%2[^bf])"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0120": [
          "MatchLongPrefix.Regex(azurewebsites\\.net/api/[a-z][a-z0-9\\-_]{1,128}\\?code=)"
        ],
        "CSCAN-AZURE0120:HttpRequest": [
          "HeaderName=MatchLongPrefix.Contains(x-functions-key)"
        ]
      }
    },
    {
      "Name": "SymmetricKey360",
      "Description": "Base64 encoded 360 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\w/\\+\\.\\-\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{60})[^\\w/\\+\\.\\-\\$,\\\\])",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "AllHexFalsePositive=MatchValue.Regex([A-F0-9]{60})"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0090": [
          "MatchPrefix.Regex((?-i)userPWD=)"
        ],
        "CSCAN-AZURE0090:Code": [
          "MatchPrefix.Contains(PublishingPassword)"
        ]
      }
    },
    {
      "Name": "SymmetricKey512",
      "Description": "Base64 encoded 512 bits symmetric key",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "SymmetricKey=Content.Regex([^\\r\\n\\t\\w/\\+\\.\\-\\$,\\\\](?<SymmetricKey>[a-z0-9/\\+]{86}==)([^\\w/\\+\\.\\-\\$]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefix.Regex(guestaccesstoken|publickey|hashkey|[^a-z0-9]pubkey[^a-z]|[^s]\\W?cache.?key[^a-z]|replica.?token|(with|token) ?hash|hashed|sha.?(512|256)|checksum|shasum|githead|revision|[^a-z]rev[^a-z]|[^a-z0-9]dummy[a-z\\s])",
        "TrivialHashKey=MatchPrefix.Regex([^a-z0-9]etag|[^a-z0-9]digest|[^a-z0-9]hawk|&hkey=|hash[^a-z\\(\\[]|mac:|HMACSHA\\d{3})",
        "LocalSuppressionRule=MatchContext.Regex(\"hash\"\\s?:)",
        "PiiPlaceholder=MatchPrefix.Regex(([^a-z0-9]|\\\\u[a-f0-9]{4})PII[^a-z0-9])",
        "OutlookSafeLink=MatchLongPrefix.Contains(safelinks)",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "WellKnownKey1=MatchValue.Contains(Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==)",
        "WellKnownKey2=MatchValue.Contains(C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==)",
        "WellKnownKey3=MatchValue.Contains(y5NIlE4wFVBIyrCi392GzZl+JO4TEGdqOerqfbT79C8zrn28Te8DsWlxvKKnjh69P/HM5k50ztz2shOt8vqlbg==)",
        "WellKnownKey4=MatchValue.Contains(GMuzNHjlB3S9itqZJHHCnRkrokLkcSyW7yK9BRbGp0ENePunLPwBgpxV1Z/pVo9zpem/2xSHXkMqTHHLcx8XRA==)",
        "WellKnownKey5=MatchValue.Contains(nLDpNGc7xzDwl/J8pbHTP37OzbBA12Rt6Px/GPy24Hfygy+U0owYiT72vjkfJcWpapiSNMSMTJgaNdrJ40N5MA==)",
        "Ambiguity=MatchContext.ContainsAny(bitmap|encodedimage)",
        "AppInsights=MatchPrefixInline.ContainsAny(Instrumentation|Instrumental)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "LocalEnumlatorEndpointInPrefix=MatchPrefix.Regex(127\\.0\\.0\\.1:1\\d{4})",
          "LocalEnumlatorEndpointInline=MatchLines.Regex(127\\.0\\.0\\.1:1\\d{4})"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0023": [
          "MatchPrefix.Regex(encdata|encrypted)",
          "MatchContext.Regex(@encrypted|encrypteddata|[^;]\\s?encrypt\\s*=\\s*true)"
        ],
        "CSCAN-MSFT0020": [
          "MatchPrefix.Contains(moniker)",
          "MatchPrefix.Regex(Mds(?-i)[^a-z](?i))"
        ],
        "CSCAN-MSFT0030": [
          "XStore=MatchPrefix.Contains(XStore)",
          "MatchContext.Contains(Account)",
          "MatchPrefix.Contains(Monitoring)"
        ],
        "CSCAN-AZURE0060": [
          "MatchPrefix.Contains(core.windows.net)",
          "MatchContext.Extract(Extractors.ValidSasToken, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-AZURE0060:HighRiskResource": [
          "MatchPrefix.Contains(dsas_secret=)",
          "ResourceType=MatchPrefix.Regex(\\.(cspkg|azpkg|wacontent|ispac|dacpac|jar)\\?)"
        ],
        "CSCAN-AZURE0070:Endpoint": [
          "AccountName=MatchContext.Regex(AccountName=(?<AccountName>[a-z0-9_]+);)",
          "Endpoint=MatchContext.Regex(Endpoint=(?<Endpoint>https?://[a-z0-9_]{3,50}\\.(table|blob|queue|file).[a-z0-9\\.]{10,50})/?;)"
        ],
        "CSCAN-AZURE0070:EndpointSuffix": [
          "AccountName=MatchContext.Regex(AccountName=(?<AccountName>[a-z0-9_]+);)",
          "EndpointSuffix=MatchContext.Regex(EndpointSuffix=(?<EndpointSuffix>[a-z0-9\\._]{10,50})[;\"'])"
        ],
        "CSCAN-AZURE0070:EndpointSuffix2": [
          "EndpointSuffix=MatchPostfix.Regex(^\\Wcore\\.windows\\.net)"
        ],
        "CSCAN-AZURE0080": [
          "AccountEndpoint=MatchContext.Regex(AccountEndpoint=(?<AccountEndpoint>https?://[a-z0-9_\\.]+\\.documents\\.azure\\.com(:\\d+)?)/?[;\"'])"
        ],
        "CSCAN-AZURE0080:Partial": [
          "MatchPrefix.Regex((Doc(ument)?|cosmos)Db(Conn(ection)?Str(ing)?|(Access)?Key))"
        ],
        "CSCAN-AZURE0070:Partial": [
          "MatchContext.Contains(Permission)",
          "MatchPrefix.Regex(Account|Storage|Access|Primary[^v]|Secondary[^v]|Blob)",
          "MatchPrefix.Regex(Key|Credential)"
        ],
        "CSCAN-AZURE0070:Partial3": [
          "AccountKey=MatchPrefix.Regex((Storage)?.?Account.?Key)"
        ],
        "CSCAN-AZURE0130:AzureBatch": [
          "MatchContext.Regex(batch\\.azure\\.com)"
        ],
        "CSCAN-GENERAL0030:CosmosDb": [
          "MatchPrefix.Regex(mongodb://.+:)",
          "MatchContext.Contains(documents.azure.com)"
        ],
        "CSCAN-GENERAL0140:OMS": [
          "MatchLongPrefix.Regex(OMSworkspace.?Key)"
        ],
        "CSCAN-GENERAL0130": [
          "MatchLongPrefix.Regex((api|client|app(lication)?)[_\\- ]?(key|secret)[^,]|ida:password)"
        ],
        "CSCAN-GENERAL0060": [
          "MatchPrefix.Regex(user(name)?[ -~\\s]{0,70}(secret|password))"
        ],
        "CSCAN-GENERAL0140": [
          "MatchPrefixInline.Regex((?-i)(KEY|(K|k)ey)(?i)\\d?\\s*=\\s*[\"']?$|[^ ](?-i)(KEY|(K|k)ey)(?i)\\d?[^a-eg-oqrtuw-z0-9\\./\\+,]|password[^a-eg-oqrtuw-z,]|[a-z]{3}(?-i)(PWD|(P|p)wd)(?i)\\d?[^a-eg-oqrtuw-z0-9\\./\\+,]|passphrase|tokens?[^a-z,]|SymmetricKey[^a-z,])",
          "MatchLongPrefix.Regex((secret|credential)s?[^a-eg-oqrtuw-z,])"
        ]
      }
    },
    {
      "Name": "LoginCredentials",
      "Description": "Plain text user name and password",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Login=Content.Regex([^a-z\\$](DB_USER|user id|uid|(sql)?user(name)?|service\\s?account)\\s*[^\\w\\s,]([ -~\\r\\n\\s]{2,120}?|[ -~]{2,30}?)([^a-z\\s\\$]|\\s)\\s*(DB_PASS|(sql|service)?password|pwd)\\s*[^a-z,\\+&\\)\\]\\}\\[\\{_][ -~\\r\\n\\s]{2,700}?([;|<,})]|$)|[^a-z\\s\\$]\\s*(DB_PASS|password|pwd)\\s*[^a-z,\\+&\\)\\]\\}\\[\\{_][ -~\\r\\n\\s]{2,60}?[^a-z\\$](DB_USER|user id|uid|user(name)?)\\s*[^\\w\\s,]([ -~\\r\\n\\s]{2,60}?|[ -~]{2,30}?)([;|<,})]|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "MitigatedValue=MatchValue.Regex(vault|SecretStore)",
        "Code=MatchValue.Regex(\\+(Password|PWD|User(name)?|Uid)\\+)",
        "MatchValue.Regex((user id|uid|user(name)?|login)\\s*[=:\"'\\s]+\\s*([\\$@#%\\{\\[\\(\\<]|\\+\\s*[@\\$]))",
        "MockedValue=MatchValue.Regex((password|pwd)([^;\"'\\r\\na-z0-9/+]+|[\\s:=\"']+)(\\?{3}|\\*{3}|#{3}|\\.{3}|x{3}|z{3}|a{5}|b{5}|\\u25CF{5}|/{5}|await|settings|dict\\())",
        "InnerMatchShortContext.Regex((password|pwd)[^;\"'\\r\\n]+[\\{\\[\\(\\<][a-z0-9\\. ]+[\\}\\]\\)\\>]|(password|pwd)\\s*[\\W-[;\\)\\]]]{0,10}(privatesettingsref|[\"'=\\s]+[\\$@#%]?[\\{\\[\\(\\<\\$%][a-z0-9\\. \\-_\\$%\"':]+[\\{\\[\\(\\<\\}\\]\\)\\>\\$%][^a-z0-9]|[\"'=\\s]+[\\$@#%]([a-z0-9]+\\.)*[a-z0-9]+[\"';]|[\"'=\\s]+([a-z_]+[\\.\\-])+[a-z0-9_]+[\\(\\[]?|[\"'=\\s]+([a-z0-9_]+\\.)*[a-z0-9_]+[\\(\\[\\{]([\"']|[0-9]{2}|(?-i)[A-Z]?[a-z]{2}(?i))|[\\{\\[\\(\\<]\\s*[\\}\\]\\)\\>]|\\Wyes\\W|\\Wno\\W|true|false|\\Wnil\\W|\\Wnull|placeholder|value[^=]|none|redact|remove|string|\\$_\\.|=\\s*pass(word)?\\W$|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG|args|parameters|\\{\\{|\\[\\[|\"\"|''|[=\\s:>];?[\"'][\\s/]|\\W#[\\w\\-:]{1,50}#\\W|\\W@[\\w\\-:]{1,50}@\\W)|(sb|nh)/[a-z]{3})",
        "SampleDb=MatchContext.Regex(azs\\-playground|cli\\-backup)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0000": [
          "Variable=MatchLongPrefix.RegexComponentRef((string |var |\\$)%Password%\\s*[,\\)])",
          "Variable2=MatchLongPrefix.RegexComponentRef(%Password%\\s*[:=]+\\s*[^\"'\\s])",
          "Variable3=MatchComponent[Password].Regex(^[a-z]?_[a-z]+$)",
          "Method=InnerMatchShortContext.RegexComponentRef(%Password%\\s*[\\(\\[])",
          "RefValue=MatchValue.Regex(\\w+\\-\\>\\w+)",
          "TrivialValue=MatchComponent[Password].Regex(^:password$)",
          "TrivialValue2=MatchComponent[Password].Regex(^&(quot|apos)$)",
          "TrivialValue3=MatchComponent[Password].MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
          "Placeholder=MatchComponent[Password].SurroundedBy({,})",
          "Placeholder2=MatchComponent[Password].Regex(^(?-i)([A-Z\\d]+\\-[A-Z]+)+$)",
          "Placeholder3=MatchComponent[Password].Regex(^[\\$\\+][a-z\\-_]+$)"
        ],
        "CSCAN-TRIAGE0001": [
          "TrivialValue=MatchValue.Regex((password|pwd)\\W+(foo[\\s\"';,]|bar[\\s\"';,]|default$|(your|my|test|[\\+|=]\\s*\\$?[a-z]+|_|\\.).?(password|pwd)[\"';]|(password|pwd)_))",
          "SameKeyValue=MatchValue.RegexComponentRef(%Password%\\s*:?=\\s*[\"']?%Password%[\"']?)",
          "UpperCasePlaceholder=MatchValue.Regex(password[ \t]*=[ \t]*[\"']?(?-i)([A-Z]+_)+[A-Z]+\\W)",
          "FilePointer=MatchValue.Regex(password[ \t]*=[ \t]*[\"']?@\\[password\\()"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "MatchLongPrefix.Regex(\\sExample)"
        ],
        "CSCAN-AZURE0020": [
          "ServerName=MatchContext.Regex((tcp:)?(?<ServerName>[a-z\\-_0-9:\\.]+(\\.database\\.azure\\.com|\\.database(\\.secure)?\\.windows\\.net|\\.cloudapp\\.net|\\.database\\.usgovcloudapi\\.net|\\.database\\.chinacloudapi\\.cn|\\.database.cloudapi.de)))",
          "UserName=MatchLines.Regex((DB_USER|user id|uid|user(name)?)(\\s*=\\s*|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)(?<UserName>[^;|\"'\\s\\r\\n<`,)]{2,50}?)[;|\"'\\s\\r\\n<`,])",
          "Password=InnerMatchShortContext.Regex((DB_PASS|password|pwd)([ \t]*=[ \t]*[\"']?|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)((?<Password>[^;|\"'\\s\\r\\n<,)]{3,700}?)|(?<Password>(sa)))[;|\"'\\s\\r\\n<`,)])",
          "MatchShortContext.Regex((^|[^a-z])(DB_[a-z]*?NAME|initial catalog|database(name)?)(\\s*=\\s*|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)(?<DbName>[^;\"'\\s\\r\\n]{4,50}?)[;|\"'\\s\\r\\n<`,])"
        ],
        "CSCAN-GENERAL0030": [
          "ServerName=MatchContext.Regex((^|[^a-z])(DB_HOST|(Remote ?LU( ?Alias)?|host(name)?|data source|server|addr|(network )?address)(\\s*=\\s*|:\\s*[\"'\\\\]+)|jdbc:sqlserver://)(?<ServerName>[a-z\\-_0-9:\\.]+))",
          "Password=InnerMatchShortContext.Regex((DB_PASS|password|pwd)([ \t]*=[ \t]*[\"']?|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)((?<Password>[^;|\"'\\s\\r\\n<,)]{3,700}?)|(?<Password>(sa||[a-z]\\d)))[;|\"'\\s\\r\\n<`,)])",
          "MatchLines.Regex((^|[^a-z])(DB_[a-z]*?NAME|initial catalog|database(name)?)[^a-z0-9])"
        ],
        "CSCAN-GENERAL0030:StringTemplate": [
          "ServerName=MatchShortContext.Regex((^|[^a-z])((Remote ?LU( ?Alias)?|host(name)?|data source|server|addr|(network )?address)(\\s*=\\s*|:\\s*[\"'\\\\]+)|jdbc:sqlserver://))",
          "Password=InnerMatchShortContext.Regex((password|pwd)([ \t]*=[ \t]*[\"']?|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)((?<Password>[^;|\"'\\s\\r\\n<`,)]{3,700}?)|(?<Password>sa))[&;|\"'\\s\\r\\n<`,)])",
          "MatchLines.Regex((^|[^a-z])(initial catalog|database(name)?)[^a-z0-9])"
        ],
        "CSCAN-GENERAL0030:odbc": [
          "Odbc=MatchPrefix.Regex(odbc.?connect|::ODBC)",
          "Password=InnerMatchShortContext.Regex((password|pwd)([ \t]*=[ \t]*[\"']?|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)((?<Password>[^;|\"'\\s\\r\\n<`,)]{3,700}?)|(?<Password>sa))[&;|\"'\\s\\r\\n<`,)])"
        ],
        "CSCAN-GENERAL0030:SSIS": [
          "SSIS=MatchLines.Contains(SSIS:)",
          "Endpoint=MatchShortContext.Regex(url=(?<Endpoint>http.*?[;|\"'\\s\\r\\n<`,]))",
          "Password=InnerMatchShortContext.Regex((password|pwd)([ \t]*=[ \t]*|[\"']\\s*=>\\s*[\"']|[\"'\\\\]+\\s*:\\s*[\"'\\\\]+)((?<Password>[^;|\"'\\s\\r\\n<`,)]{3,700}?)|(?<Password>sa))[&;|\"'\\s\\r\\n<`,)])"
        ],
        "CSCAN-MSFT0040:Kusto": [
          "UserName=MatchValue.Regex(username\\([\"'](?<UserName>.+?)[\"']\\))",
          "Password=MatchValue.Regex(password\\([\"'](?<Password>.+?)[\"']\\))",
          "Kusto=MatchPrefix.Contains(kusto:)"
        ],
        "CSCAN-GENERAL0030:QuotedPassword": [
          "UserName=MatchValue.Regex((user(name)?|name)\\s*=\\s*(?<q>[\"'])(?<UserName>[^\"'\\s]{3,50}?)\\k<q>)",
          "Password=MatchValue.Regex(password[ \t]*=[ \t]*(?<q>[\"'])(?<Password>[^\"'\\s]{3,50}?)\\k<q>)"
        ],
        "CSCAN-GENERAL0030:SimplePassword": [
          "UserName=MatchValue.Regex((user(name)?|name)=(?<UserName>[a-z0-9\\\\@\\-_\\.]{3,50})[\\s;])",
          "Password=MatchValue.Regex(password=(?<Password>[^\\s;]{3,50})([\\s;]|$))"
        ]
      }
    },
    {
      "Name": "LoginCredentialsInUrl",
      "Description": "User Login Credentials in URL",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Password=Content.Regex((ssh|(ht|f)tps?)://[^%:\\s\"'/][^:\\s\"'/\\$]+[^:\\s\"'/\\$%]:(?<Password>[^%\\s\"'/][^@\\s\"'/]{0,100}[^%\\s\"'/])@[a-z0-9:\\.\\-_%\\?=/]+)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "TrivialValue=MatchValue.Regex(^(proxy)?pass$)",
        "TrivialValue2=MatchPostfix.Regex((sample|example)\\.(com|net))"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0060": []
      }
    },
    {
      "Name": "CertificatePrivateKeyHeader",
      "Description": "Certificate private key header",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "PrivateKeyHeader=Content.Regex((?-i)\\-{5}BEGIN( ([DR]SA|EC|OPENSSH|PGP))? PRIVATE KEY( BLOCK)?\\-{5})",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "MockedValue=MatchPostfix.Regex(\\?{4}|\\*{3}|#{5}|x{5}|z{5}|a{5}|b{5}|\\u25CF{5}|[\\r\\n]{10}|/{5})",
        "DictionaryStringFalsePositive=MatchContext.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-GENERAL0020:PrivateKeyHeaderEncrypted": [
          "Key=MatchLongPostfix.Regex([\\r\\n][a-z0-9/+\\r\\n]{44})",
          "Encrypted=MatchPostfix.Contains(Encrypted)"
        ],
        "CSCAN-GENERAL0020:PrivateKeyHeader": [
          "MatchPostfix.Regex([\\r\\n][a-z0-9/+\\r\\n]{44})"
        ]
      }
    },
    {
      "Name": "HttpAuthorizationHeader",
      "Description": "Http authorization header",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Token=Content.Regex(authorization[,\\[:= \"']+(basic|digest|hoba|mutual|negotiate|oauth( oauth_token=)?|bearer [^e]|scram\\-sha\\-1|scram\\-sha\\-256|vapid|aws4\\-hmac\\-sha256)[\\s\\r\\n]{0,10}(?<Token>[a-z0-9/+_.=]{10,}))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "Code=MatchValue.Regex(this\\.)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0120": []
      }
    },
    {
      "Name": "ActiveDirectoryDomainContext",
      "Description": "Active directory domain name",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Domain=Content.Regex([\":\\s=](?<Domain>(x?corp|extranet(test)?|ntdev)(\\.microsoft\\.com)?|corp|redmond|europe|middleeast|northamerica|southpacific|southamerica|fareast|africa|exchange|extranet(test)?|partners|parttest|ntdev|ntwksta|sys\\-wingroup|windeploy|wingroup|winse|segroup|xcorp|xred|mslpa|cdocidm|cez\\.ice|(phx|gme|ame|cme|usme|rno)\\.gbl|POOP|MSSTORE|(PROD\\.)?SD\\.NET|(INT\\.)?SDINT\\.NET|((DEV|SEHVA)\\.)?WDG[AU]E|CAE|(BRASS(AZURE)?|HALOWAYPOINT|MGMT|[MX]KMS|MUSS|NONPROD|PCE|PROD|SECOPS|SURFACE)(\\.(LOCAL|LIVE))?)\\W)",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "MatchPostfix.Regex([^`]\\$\\w{1,20})",
        "MatchPostfix.Regex(%\\w{1,20}%)",
        "MatchPostfix.Regex(badUser)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-MSFT0040:NetworkCredential": [
          "Command=MatchPrefixInline.Regex(NetworkCredential\\([^,]+,\\s*\"[^,]+\"\\s*,)"
        ],
        "CSCAN-MSFT0040:NetUseCmd": [
          "Command=MatchPrefixInline.Regex(net(\\.exe)?\\s+use.+?/u:)"
        ],
        "CSCAN-MSFT0040:TaskSchedulerCmd": [
          "Command=MatchPrefixInline.Regex(schtasks(\\.exe)?.*/ru\\s)",
          "Password=MatchPostfix.Regex(/p[ \t]+[^\\$%])"
        ]
      }
    },
    {
      "Name": "ClientSecretContext",
      "Description": "Client secret context",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "ClientSecret=Content.Regex((^|[a-z\\s\"'_])((app(lication)?|client)[_\\- ]?(key|secret)|refresh[_\\-]?token|[^t]AccessToken(Secret)?|(Consumer|api)(Secret|Key)|(Twilio(Account|Auth)(Sid|Token)))([\\s=:>]{1,10}|[\\s\"':=]{3,10})(?<ClientSecret>([a-z0-9/+=_.-]{10,200}[^\\(\\[\\{;,\\r\\n]|[^\\s\"';<,\\)]{5,200})))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)",
        "MethodCall=MatchPostfix.Regex(^\\()",
        "ApplicationKey=MatchContext.Regex(ApplicationKey.{1,100}MasterKey)",
        "ApplicationKey2=MatchPrefix.Contains(AppKey)",
        "Zumo=MatchContext.Regex((?-i)Zumo[^a-z])",
        "ReferenceValue=MatchValue.Regex(^([\\+&\\*\\>][ \t]?[a-z]|0x\\d|# ))",
        "ReferenceValue2=MatchPrefix.Regex(::$)",
        "ReferenceValue3=MatchValue.Regex(^\\w+\\s*\\-\\>)",
        "ReferenceValue4=MatchValue.Regex(secret$)",
        "TrimedValue=MatchValue.Regex(\\.{3})",
        "Hex=MatchValue.Regex(^0x)",
        "KeyVaultPlaceholder=MatchValue.Regex(secret_kv)",
        "JavaScript=MatchPrefix.Regex(==)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0000": [
          "Variable=MatchLongPrefix.RegexRef((string |var |\\$)%MatchValue%\\s*[,\\)])",
          "Variable2=MatchLongPrefix.RegexRef(%MatchValue%\\s*[:=]+\\s*[^\"'\\s])",
          "Variable3=MatchLines.RegexRef((string|var)[^\"']+(Key|secret)[^\"']+%MatchValue%)",
          "InStringLiteral=MatchLines.RegexRef((key|secret|token)\\s+%MatchValue%)"
        ],
        "CSCAN-TRIAGE0001": [
          "Placeholder=MatchValue.Regex(base64|encoded|tenantId)"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0130": [
          "MatchPrefix.Regex((app(lication)?|client)[_\\- ]?id)"
        ],
        "CSCAN-GENERAL0130:apikey": [
          "MatchPrefix.Contains(api)"
        ],
        "CSCAN-AZURE0140:RefreshToken": [
          "MatchPrefix.Regex(\\Wrefresh.?token)"
        ],
        "CSCAN-GENERAL0130:Complexity": [
          "MatchValue.Regex([^\\s]{0,50}(\\d+[a-z]+[^a-z\\d\\s]+|\\d+[^a-z\\d\\s]+[a-z]+|[a-z]+\\d+[^a-z\\d\\s]+|[a-z]+[^a-z\\d\\s]+\\d+|[^a-z\\d\\s]+\\d+[a-z]+|[^a-z\\d\\s]+[a-z]+\\d+)[^\\s]{0,50})"
        ]
      }
    },
    {
      "Name": "CommunityStringContext",
      "Description": "SNMP Server Community String / Privacy String Context",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "CommunityString=Content.Regex((^|\\W{2}|set )snmp(\\-server)?( | [ -~]+? )(community|priv)\\s[\"']?(?<CommunityString>[^\\s]+)[\"']?(\\s|$))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "AllCharsFalsePositive=MatchValue.Regex((?-i)^([a-z%=]{10,}|[A-Z%=]{10,})(\\d{1,3})?$)",
        "AllDigitFalsePositive=MatchValue.Regex((?-i)^\\d+==?$)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
        "PathFalsePositive2=MatchValue.Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|y{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
        "TrivialValue=MatchValue.Regex(^[^a-z0-9]+$)",
        "MatchValue.Regex(^ip(addr|mask)$)",
        "MatchValue.Regex(^string)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-NETWORKING0010": []
      }
    },
    {
      "Name": "PasswordContextInCode",
      "Description": "Password context in code",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Password=Content.Regex(([a-z_\\s%\\$,\\.@\\-]password[\"']\\s*,\\s*(\\$?@?|N?|(u8?|L)?R?)(?<q1>['\"])(?<Password>[^\"'][^\\s\"']{2,1100}?)\\k<q1>)\\s*\\)|([\"']name[\"']\\s*:\\s*[\"']\\w*password[\"'],\\s*[\"']value[\"']\\s*:\\s*[\"'](?<Password>[^\"']+)[\"'])|([a-z_\\s%\"'\\$,\\.@\\->:](password(override)?|(primary|secondary)Key)[\"']?\\s*[=:]+\\s*(\\$?@?|N?|(u8?|L)?R?)(?<q2>['\"])(?<Password>[^\"'][^\\s\"']{2,1100}?)\\k<q2>)|([cC]onvert[tT]o\\-?[sS]ecure[sS]tring\\s*((\\(|\\W[sS]tring)\\s*)?(?<q3>['\"])(?<Password>[^\"'][^\\s\"']{2,1100}?)\\k<q3>)|((?<Password>[a-z0-9/+=]{10})[\"']\\s*\\|\\s*[cC]onvert[tT]o\\-?[sS]ecure[sS]tring\\s)|(new(\\-Object)?\\s+((System\\.Security\\.Cryptography\\.X509Certificates\\.)?X509Certificate2?|(System\\.Net\\.)?NetworkCredential|WebCredentials)\\([^\\(\\),]+\\s*,\\s*\"(?<Password>[^\\s\"]{2,1100}?)\"))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "TestSuiteParameterDescriptor=MatchContext.Regex(\\<(Out|In)Params|FunctionCall\\>)",
        "TrivialMatch=MatchValue.Regex(^(p\\\\n|user|accountid)$)",
        "UICode=MatchContext.Regex(Input(Element|Box))",
        "PlaceholderInConnStr=MatchValue.Regex(\\$\\(\\$[a-z]+\\))",
        "ASPNETMVCMethod=MatchPrefixInline.Regex((Url|Html)\\.[a-z]+\\()",
        "TrivialValue=MatchValue.Regex(^(?-i)[A-Z]?[a-z]{1,20}(([A-Z][a-z]{1,20}|[A-Z]{2,20})){1,10}[']?$)",
        "ContainsVariable=MatchValue.Regex(\\$[a-z]+\\d{0,2};)",
        "AmbiguityDataSchema=MatchContext.Regex(PrimaryKey[ \t]*=[ \t]*['\"][a-z0-9]+['\"])"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0030": [
          "MatchContext.Regex((Network|Web)Credentials?\\()"
        ],
        "CSCAN-GENERAL0060": []
      }
    },
    {
      "Name": "PasswordContextInScript",
      "Description": "Password context in script",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": null,
      "ScannerMatchingExpressions": [
        "ScriptArgumentPassword=Content.Regex(\\s-(admin|user|vm)?password\\s+[\"']?(?<ScriptArgumentPassword>[^$\\(\\[<\\{\\-\\s,\"']+)[\"']?(\\s|$))",
        "CertUtilPassword=Content.Regex(certutil(\\.exe)?.{1,10}\\-p\\s+[\"']?(?<CertUtilPassword>[^\\s,]{2,50})[\"']?)",
        "ScriptAssignmentPassword=Content.Regex((^|[_\\s\\$])[a-z]*(password|secret)[ \\t]*[=:]+[ \\t]*(?<ScriptAssignmentPassword>[^:\\s\"';,<]{2,200}))",
        "RegistryPassword=Content.Regex(\\s-Name\\s+[\"']\\w+Password[\"']\\s+-Value\\s+[\"']?(?<RegistryPassword>[^\\s\"']{2,1100})[\"']?)",
        "NetUsePassword=Content.Regex((^|[\\s\\r\\n\\\\])net(\\.exe)?[\"'\\s\\\\]{1,5}(user\\s+|share\\s+/user:)[^\\s,]+\\s+[\"']?(?<NetUsePassword>[^\\s,\"'>]{2,50})[\"']?)",
        "PsExecPassword=Content.Regex(psexec(\\.exe)?.{1,50}-u.{1,50}-p\\s+[\"']?(?<PsExecPassword>[^\\s,]{2,50})[\"']?)"
      ],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "AKV=MatchContext.Regex(vault\\.azure\\.net|KeyVault)",
        "Method=MatchPostfix.Regex(^[ (]+[\\$\"']?\\w+)",
        "Var=MatchPostfix.Regex(^\\$\\w+$)",
        "WithinStringLiteral=MatchShortContext.RegexRef((password|secret)[ \\t]*[=:]+[ \\t]*%MatchValue%.{0,5}[\"'])",
        "WithinStringLiteral2=MatchPostfix.Regex(^.{0,2}([a-z]{3,10} ){3})",
        "boolVariable=MatchPrefixInline.Regex(\\Wis\\w*(password|secret))",
        "Parameterized=MatchPrefixInline.Regex(\\$(password|secret):)",
        "Placeholder=MatchValue.Regex(^(optional|parm|parameter)$)",
        "GUID=MatchValue.Regex(^[\\<\\(\\[\\{]?[a-f0-9]{8}[\\-_]?([a-f0-9]{4}[\\-_]?){3}[a-f0-9]{12}[\\>\\)\\]\\}]?$)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "TrivialValue=MatchLines.Regex((password|secret)[ \\t]*=[ \\t]*[a-z]{1,20}(?-i)(([A-Z][a-z]{1,20}|[A-Z]{2,20})){1,10}[\\s;,])"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
          "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
          "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
          "DictionaryStringFalsePositive=MatchValue.Extract(Extractors.DictionaryString, Microsoft.Security.CredScan.KnowledgeBase)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0060": []
      }
    },
    {
      "Name": "PasswordContextInXml",
      "Description": "Password context in XML",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "Password=Content.Regex(<(password|pwd|secret|credential)>(?<Password>[^<]+)</(password|pwd|secret|credential)>|<(add\\s+key|(setting|credential|variable)[^>]+name)\\s*=\\s*\"[^\"]*ConnectionString\"[^<]{1,60}<?value(\\s*=\\s*\"|>)(?<Password>[a-z0-9/+=!#\\.;\\-_]{200})|<(add\\s+key|(setting|credential|variable)[^>]+name)\\s*=\\s*\"[^\"]*([^\\s][kK][eE][yY]([sS]|[0-9])?|([cC]redential|CREDENTIAL)[sS]?[a-z0-9]?|([sS]ecret|SECRET)(s|S|[0-9])?|[pP]ass[wW]ord|PASSWORD|PWD|PW|[tT]oken|TOKEN|([kK]ey|KEY)([pP]rimary|PRIMARY|[sS]econdary|SECONDARY|[oO]r[sS]as|SAS|[eE]ncrypted|ENCRYPTED))\"[^<]{1,60}<?value(\\s*=\\s*\"|>)(?<Password>[^\"<]+)|<add\\s+key\\s*=\\s*\"[^\"]+\"\\s*value\\s*=\\s*\"[^\"]*?([eE]ncrypted|ENCRYPTED).?([sS]ecret|SECRET)(?<Password>[^\"]+)\")",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [
        "TrivialMatch=MatchPrefixInline.Regex([^\"'\\.]replace|removed|redacted|\\seg:|[^a-z0-9]invalid|[^a-z0-9]foobar|[^a-z0-9]dummy[a-z\\s]|[^a-z0-9]badly|badpassword|mock(up)?(user|key|sample)|fake(user|key|sample))",
        "LocalSuppressionRule=MatchContext.Contains(placeholder)",
        "UiDefinition=MatchPrefix.Contains(label:)",
        "KeyVault=MatchPrefixInline.Contains(KeyVault)",
        "FileValue=MatchValue.Regex(\\.(ps1|cer|exe|bat|vbs|pfx|pvk|pem)$)",
        "AssignementValue=MatchValue.Regex((true|false|_id)$)",
        "MitigatedValue=MatchValue.Regex(\\$kv|kv:|vault|SecretStore)",
        "PathFalsePositive=MatchValue.Regex(^([a-z]+\\d*[:|/_\\-\\\\]){1,10}[a-z]+\\d*.?$)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(^,^)",
        "ValuePlaceholder0=MatchValue.SurroundedBy(!,!)",
        "ValuePlaceholder1=MatchValue.SurroundedBy(_,_)",
        "ValuePlaceholder2=MatchValue.SurroundedBy({,})",
        "ValuePlaceholder3=MatchValue.SurroundedBy([,])",
        "ValuePlaceholder4=MatchValue.SurroundedBy((,))",
        "ValuePlaceholder5=MatchValue.SurroundedBy(<,>)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(+,+)",
        "ValuePlaceholder5=MatchValue.SurroundedBy(&lt;,&gt;)",
        "ValuePlaceholder6=MatchValue.SurroundedBy(\\\\u003c,\\\\u003e)",
        "ValuePlaceholder7=MatchValue.SurroundedBy(\\\\u005b,\\\\u005d)",
        "ValuePlaceholder8=MatchValue.SurroundedBy(\\\\u007b,\\\\u007d)",
        "ValuePlaceholder9=MatchValue.SurroundedBy(\\\\u0028,\\\\u0029)",
        "ValuePlaceholder10=MatchValue.SurroundedBy(%,%)",
        "ValuePlaceholder11=MatchValue.SurroundedBy(*,*)",
        "ValuePlaceholder12=MatchValue.SurroundedBy($,$)",
        "ValuePlaceholder13=MatchValue.SurroundedBy(#,#)",
        "ValuePlaceholder14=MatchValue.SurroundedBy(@,@)",
        "ValuePlaceholder15=MatchValue.Regex(^[\"']?([%\\$]+[a-z\\d]$|[@#][\\{\\[\\(\\<][a-z\\.\\-_/:]+[\\}\\]\\)\\>]|[\\$%@](\\{\\d\\}|[\\{\\[\\(\\<][a-z\\.\\-_/:]+\\d*[\\}\\]\\)\\>])))",
        "EmptyValue=MatchValue.Regex([\\s\\r\\n]{5}|\\{\\d\\})",
        "MockedValue=MatchValue.Regex(^(\\({2}|\\){2}|_{3}|\\?{3}|\\*{3}|\\.{3}|#{5}|(?-i)x{3}|z{3}|X{3}|Z{3}(?i)|a{10}|b{10}|\\u25CF{5}|/{5}))",
        "TrivialLength=MatchValue.NotRegex(^(sa|ut)$|^.{3,}$)",
        "TrivialValue0=MatchValue.Regex(^[^a-z0-9]+$)",
        "TrivialValue1=MatchValue.Regex(^[\\$#%@](\\w{3,30}\\.)+\\w{3,30})",
        "TrivialValue2=MatchValue.Regex(^(\\w{2,20}[a-z]\\.)+\\w{1,20}[a-z][\\(\\[\\{]?)",
        "TrivialValue3=MatchValue.Regex(^\\w+[\\(\\[\\{]\\d)",
        "TrivialValue4=MatchValue.Regex(^(.?ToBase64Url|yes|no|enabled?|disabled?|undefined|\\$?true|\\$?false|nil|repl|null|none|not|redacted?|removed?|string|credential|password|[a-z0-9\\/]+\\.(ps1|txt)|Az[a-z0-9\\-]+SG)$)",
        "TrivialValue5=MatchValue.Regex(^[\\$%]?[\\[\\{\\(<][a-z0-9]{5,}[\\]\\}\\)>])",
        "TrivialValue6=MatchValue.Regex(^(https?|(sb|nh)/[a-z]{3}|\\$_\\.))",
        "TrivialValue7=MatchValue.Regex(\\w+\\([\\w\\(\\)]+\\))",
        "TrivialValue8=MatchValue.Regex(^([,\\{\\[\\(\\<//\\)% \t\\-]|\\$[^\\d]))",
        "TrivialValue9=MatchValue.Regex(^(~[/\\\\]|\\.\\$|\\\\[trn]|AP[/\\\\]|VE[/\\\\]|cp[/\\\\]|AADIP[/\\\\]|[a-z]+\\-\\{\\w+\\}))",
        "TrivialValue10=MatchValue.Regex(\\s)",
        "TrivialValue11=MatchValue.Regex(\\.\\*|change|[^\"']Random|Replace|registry|args|null|Environment|parameter|ctl00|txtPassword|^(Mock|Fake|Invalid)|Placeholder$)",
        "PowerShellCmdlet=MatchValue.Regex(^[a-z]+[\\-][a-z]+(\\([\\$\"']|$))",
        "PowerShellVar=MatchValue.Regex((^|\\W)\\$[a-vx-z]{5,}($|\\.))",
        "SqlVar=MatchValue.Regex(^@[a-z]+$)",
        "VarPlaceholder=MatchValue.Regex(\\$\\([a-z]{5,}\\))",
        "Thumprint=MatchValue.Regex(^[a-f\\d]{40}$)",
        "AppInsights=MatchLines.ContainsAny(AppKey|ApplicationKey|InsightsKey|InstrumentationKey)",
        "DictionaryWordFalsePositive=MatchValue.Extract(Extractors.DictionaryWord, Microsoft.Security.CredScan.KnowledgeBase)",
        "StringLiteralPlaceholder=MatchValue.Regex(\\{.+?\\})",
        "VersionNumber=MatchValue.Regex((\\d{1,6}\\.){1,3}\\d{1,6})",
        "StubValue=MatchValue.Regex(^#?(([a-z]+)-){1,3}([a-z]+).?$)",
        "StubValue2=MatchValue.Regex(^#?(([a-z]+)_){2,3}([a-z]+).?$)",
        "ListValue=MatchValue.Regex(^(([a-z]+)[,; \\|]){2,}([a-z]+).?$)",
        "SameKeyValue=MatchPrefixInline.RegexRef(%MatchValue%[^\"'a-z])",
        "NonSecretKey=MatchShortContext.ContainsAny(PartitionKey|EventKey|cosmostoken|compressiontoken)",
        "KeyIndexing=MatchPostfix.Regex(^[\"']\\w[\\w\\[\\]\\\\/\\s]+[\"'])",
        "HexValue=MatchValue.Regex(^0x[a-f0-9]+)",
        "DecValue=MatchValue.Regex(^(\\d{1,2}|\\d{4,8}|[1-9]+00)$)",
        "MethodName=MatchValue.Regex(^\\w{3,}\\(\\)?$)",
        "XmlEncodedChars=MatchValue.Regex(&(amp|gt|lt|quot|apos)(;|$))",
        "XmlCanonicalChars=MatchValue.Regex(&#(x[a-f\\d]+|\\d+)(;|$))",
        "Sample=MatchPrefix.Regex(e\\.g\\.|example|sample|SimulatedDevice)",
        "LongDigits=MatchValue.Regex([0-9%=\\-]{44})",
        "MockedValue=MatchValue.Regex(_{3}|\\?{3}|\\*{3}|#{3}|\\u25CF{5}|/{5}|(?-i)x{3}|z{3}|X{3}|Z{3}|0{8})",
        "AppInsights=MatchPrefix.ContainsAny(Instrumentation|Instrumental|AppInsight)",
        "KeyName=MatchPrefixInline.ContainsAny(ConnectionStringKey|PublicKey|NameKey|CacheKey|AccountKey|AutoKey)",
        "Mitigated=MatchPrefix.Regex(<Vault>|KVEncrypted)",
        "XmlSameKeyValue=MatchPrefixInline.RegexRef((Key|name)\\s*=\\s*[\"']%MatchValue%[\"'])",
        "TrivialValue=MatchValue.Regex(^[a-z]{1,20}(?-i)(([A-Z][a-z]{1,20}|[A-Z]{2,20})){1,10}$)",
        "GUID=MatchValue.Regex(^[\\<\\(\\[\\{]?[a-f0-9]{8}[\\-_]?([a-f0-9]{4}[\\-_]?){3}[a-f0-9]{12}[\\>\\)\\]\\}]?$)",
        "Scrubber=MatchValue.Regex(scrubber|security\\||https?|^@\\(|Bearer)"
      ],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0001": [
          "TrivialValue=MatchLines.Regex(value(\\s*=\\s*\"|>)[a-z]{1,20}(?-i)(([A-Z][a-z]{1,20}|[A-Z]{2,20})){1,10}([<\"]|$))",
          "FilePointer=MatchValue.Regex(@\\[password\\()"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-TRIAGE0021": [
          "MatchValue.Regex(^\\d+$)"
        ],
        "CSCAN-TRIAGE0022": [
          "MatchContext.ContainsAny(contoso|fabrikam|northwind|sandbox|onebox|localhost|127.0.0.1|testacs.com|s-int.net)"
        ],
        "CSCAN-GENERAL0060": []
      }
    },
    {
      "Name": "SymmetricKeyContextInXml",
      "Description": "Symmetric key context in xml files",
      "Tags": [
        "Performance_Quick",
        "Quality_Production",
        "Version_v1"
      ],
      "ScopeMatchingExpressions": {},
      "ScannerMatchingExpression": "XmlElement=Content.Regex(<(machineKey|parameter name=\"|[a-z]+AccountInfo[^a-z]))",
      "ScannerMatchingExpressions": [],
      "FilterMatchingExpressions": [],
      "RankerMatchingExpressions": {
        "CSCAN-TRIAGE0000": [
          "AllCharsFalsePositive=MatchComponent[Key].Regex((?-i)^[a-z%=]{10,}(\\d{1,3})?$)",
          "PathFalsePositive=MatchComponent[Key].Regex(^([a-z]+[:|/_\\\\]){1,3}[a-z]+$)",
          "PathFalsePositive2=MatchComponent[Key].Regex([a-z\\|/\\\\]{32,}\\.[a-z]+)",
          "MockedValue=MatchComponent[Key].Regex(_{3}|\\?{3}|\\*{3}|#{5}|\\u25CF{5}|/{5}|x{5}|z{10}|a{10}|b{10}|0{10}|1{10})",
          "TrivialValue=MatchComponent[Key].Regex(^[^a-z0-9]+$)"
        ],
        "CSCAN-TRIAGE0002": [
          "justification=MatchLines.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS001(:SecretInline)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])",
          "justification=MatchPrevLine.Regex(\\[\\s*SuppressMessage\\s*\\\\?\\(\\s*@?\"Microsoft.Security\"\\s*,\\s*@?\"CS002(:SecretInNextLine)?\"\\s*(,\\s*Justification\\s*=\\s*\"(?<justification>[^\"]*)\"\\s*)?\\\\?\\)\\s*\\])"
        ],
        "CSCAN-GENERAL0050": [
          "Key=MatchContext.Regex((decryption|validation)Key\\s*=\\s*\"(?<Key>[a-f0-9]{48,})\")"
        ],
        "CSCAN-MSFT0030": [
          "EncryptedKeyPrefix=MatchContext.Regex((accountSharedKey|connectionString|sharedPassword)\\s*=\\s*\"(?<EncryptedKeyPrefix>[a-z0-9/+]{43}))"
        ]
      }
    }
  ],
  "credTypes": [
    {
      "Id": "CSCAN-AWS0010",
      "Name": "Amazon S3 Client Secret Access Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_AWS",
        "Severity_High",
        "Type_Token",
        "Usage_Authentication",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-AZURE0010",
      "Name": "Azure Subscription Management Certificate",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_PrivateKey",
        "Usage_Authentication",
        "ValidThru_Years",
        "ProviderType_CEPDisabled"
      ]
    },
    {
      "Id": "CSCAN-AZURE0020",
      "Name": "Azure SQL Connection String",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_Mid",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0030",
      "Name": "Azure Service Bus Shared Access Signature",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Variant",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0040",
      "Name": "Azure Redis Cache Connection String Password",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0050",
      "Name": "Azure IoT Shared Access Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Variant",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0060",
      "Name": "Azure Storage Account Shared Access Signature",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_Mid",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Variant"
      ]
    },
    {
      "Id": "CSCAN-AZURE0061",
      "Name": "Azure Storage Account Shared Access Signature for High Risk Resources",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Variant",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0070",
      "Name": "Azure Storage Account Access Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPCombinedScanners",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0080",
      "Name": "Azure COSMOS DB Account Access Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0090",
      "Name": "Azure App Service Deployment Password",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPPatternUpdate"
      ]
    },
    {
      "Id": "CSCAN-AZURE0100",
      "Name": "Azure DevOps Personal Access Token",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Months"
      ]
    },
    {
      "Id": "CSCAN-AZURE0120",
      "Name": "Azure Function Master/API Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_Mid",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-AZURE0130",
      "Name": "Azure Shared Access Key / Web Hook Token",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_Variant"
      ]
    },
    {
      "Id": "CSCAN-AZURE0140",
      "Name": "Azure AD Client Access Token",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Azure",
        "Severity_Low",
        "Type_Token",
        "Usage_Authentication",
        "ValidThru_Transient"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0020",
      "Name": "X.509 Certificate Private Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_Mid",
        "Type_PrivateKey",
        "Usage_Crypto",
        "Usage_Authentication",
        "Usage_CodeSigning",
        "ValidThru_Years"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0030",
      "Name": "User Login Credentials",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_Mid",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_CEPCombinedScanners",
        "ProviderType_PasswordDetector"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0050",
      "Name": "ASP.NET Machine Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_Mid",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0060",
      "Name": "General Password",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_Mid",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_TillRotation",
        "ProviderType_PasswordDetector"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0120",
      "Name": "Http Authorization Header",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_High",
        "Type_Token",
        "Usage_Authentication",
        "ValidThru_Variant"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0130",
      "Name": "Client Secret / Api Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_High",
        "Type_SymmetricKey",
        "Usage_Hashing",
        "ValidThru_SemiPermanent",
        "ProviderType_CEPCombinedScanners"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0140",
      "Name": "General Symmetric Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_Low",
        "Type_SymmetricKey",
        "Usage_Unknown",
        "ValidThru_TillRotation",
        "ProviderType_CEPCombinedScanners"
      ]
    },
    {
      "Id": "CSCAN-GENERAL0150",
      "Name": "Ansible Vault",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_General",
        "Severity_High",
        "Type_Unknown",
        "Usage_Unknown",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-MSFT0020",
      "Name": "Moniker Agent Storage Account Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_MicrosoftInternal",
        "Severity_Low",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-MSFT0030",
      "Name": "Legacy Geneva Resource Access Key",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_MicrosoftInternal",
        "Severity_Low",
        "Type_SymmetricKey",
        "Usage_Authentication",
        "ValidThru_TillRotation"
      ]
    },
    {
      "Id": "CSCAN-MSFT0040",
      "Name": "Domain User Password",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_MicrosoftInternal",
        "Severity_High",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_Months",
        "ProviderType_PasswordDetector"
      ]
    },
    {
      "Id": "CSCAN-MSFT0090",
      "Name": "Internal Common Default Password",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_MicrosoftInternal",
        "Severity_High",
        "Type_Unknown",
        "Usage_NotApplicable",
        "ValidThru_TillRotation",
        "PatternContainsSecret_Yes"
      ]
    },
    {
      "Id": "CSCAN-NETWORKING0010",
      "Name": "Networking Device Secret",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_NetworkingDevice",
        "Severity_Mid",
        "Type_Passphrase",
        "Usage_Authentication",
        "ValidThru_SemiPermanent",
        "ProviderType_CEPDisabled"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0000",
      "Name": "Filtered Scan Result with lowest matching confidence",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Tuning",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0001",
      "Name": "Filtered Scan Result with highest matching confidence",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Tuning",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0002",
      "Name": "InlineSuppressedMatch",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Triage",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0021",
      "Name": "TrivialMatch",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Triage",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0022",
      "Name": "TestEnvironmentSecret",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Triage",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    },
    {
      "Id": "CSCAN-TRIAGE0023",
      "Name": "EncryptedData",
      "Description": null,
      "HelpLink": null,
      "Tags": [
        "Scope_Triage",
        "Severity_Low",
        "Type_Unknown",
        "Usage_Unknown"
      ]
    }
  ]
}