name: "DotNet SDK Upgrade"

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  dotnet-update:
    runs-on: ubuntu-latest
    env: 
      MAJOR_MINOR_VERSION: "6.0"
    outputs:
      BRANCH_NAME: ${{ steps.create_branch.outputs.BRANCH_NAME }}
      SHOULD_UPDATE: ${{ steps.fetch_latest_patch.outputs.SHOULD_UPDATE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check patch version
        id: fetch_latest_patch
        shell: bash
        run: |
          latest_patch_version=$(curl -sb -H "Accept: application/json" "https://dotnetcli.blob.core.windows.net/dotnet/Sdk/${{ env.MAJOR_MINOR_VERSION }}/latest.version")
          current_patch_version=$(jq .sdk.version ./src/global.json | xargs)

          exit_code=0
          function version { printf "%03d%03d%03d%03d" $(echo "$1" | tr '.' ' '); }
          
          [ $(version $current_patch_version) -ge $(version $latest_patch_version) ] && exit_code=1

          echo "DOTNET_CURRENT_VERSION=${current_patch_version}" >> $GITHUB_OUTPUT
          echo "DOTNET_LATEST_VERSION=${latest_patch_version}" >> $GITHUB_OUTPUT
          echo "SHOULD_UPDATE=${exit_code}" >> $GITHUB_OUTPUT
      - name: Create annotation for build error
        if: ${{ steps.fetch_latest_patch.outputs.SHOULD_UPDATE == 1 }}
        run: echo "::warning ::Latest DotNet SDK patch is ${{ steps.fetch_latest_patch.outputs.DOTNET_LATEST_VERSION }}, and we are on ${{ steps.fetch_latest_patch.outputs.DOTNET_CURRENT_VERSION }}. No need to update"
      - name: Update patch version
        if: ${{ steps.fetch_latest_patch.outputs.SHOULD_UPDATE == 0 }}
        shell: bash
        run: |
          patch_version="${{ steps.fetch_latest_patch.outputs.DOTNET_LATEST_VERSION }}"
          current_version="${{ steps.fetch_latest_patch.outputs.DOTNET_CURRENT_VERSION }}"

          # Update globals
          echo $(cat ./src/global.json | jq --arg patch_version "$patch_version" '.sdk.version = $patch_version') > ./src/global.json

          # Update devcontainer
          echo $(cat ./.devcontainer/devcontainer.json | jq --arg patch_version "$patch_version" '.features."ghcr.io/devcontainers/features/dotnet".version = $patch_version') > ./.devcontainer/devcontainer.json

          # Update dev.sh
          sed -i "s/DOTNETSDK_VERSION=\"$current_version\"/DOTNETSDK_VERSION=\"$patch_version\"/g" ./src/dev.sh
      - name: GIT commit and push all changed files
        if: ${{ steps.fetch_latest_patch.outputs.SHOULD_UPDATE == 0 }}
        id: create_branch
        env: 
          CI_COMMIT_MESSAGE: Upgrade dotnet sdk to v${{ steps.fetch_latest_patch.outputs.DOTNET_LATEST_VERSION }}
          CI_COMMIT_AUTHOR: AutoUpdater
          BRANCH_NAME: feature/dotnetsdk-upgrade/${{ steps.fetch_latest_patch.outputs.DOTNET_LATEST_VERSION }}
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"

          git checkout -b ${{ env.BRANCH_NAME }}
          git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}

          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}" >> "$GITHUB_OUTPUT"
  build-hashes:
    if: ${{ needs.dotnet-update.outputs.SHOULD_UPDATE == 0 }}
    needs: [dotnet-update]
    outputs: 
      BRANCH_NAME: ${{ needs.dotnet-update.outputs.BRANCH_NAME }}
    strategy:
      matrix:
        runtime: [ linux-x64, linux-arm64, linux-arm, win-x64, win-arm64, osx-x64, osx-arm64 ]
        include:
        - runtime: linux-x64
          os: ubuntu-latest
          devScript: ./dev.sh

        - runtime: linux-arm64
          os: ubuntu-latest
          devScript: ./dev.sh

        - runtime: linux-arm
          os: ubuntu-latest
          devScript: ./dev.sh

        - runtime: osx-x64
          os: macOS-latest
          devScript: ./dev.sh

        - runtime: osx-arm64
          os: macOS-latest
          devScript: ./dev.sh

        - runtime: win-x64
          os: windows-2019
          devScript: ./dev

        - runtime: win-arm64
          os: windows-latest
          devScript: ./dev

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.dotnet-update.outputs.BRANCH_NAME }}

    # Build runner layout
    - name: Build & Layout Release
      run: |
        ${{ matrix.devScript }} layout Release ${{ matrix.runtime }}
      working-directory: src

    # Check runtime/externals hash
    - name: Compute/Compare runtime and externals Hash
      shell: bash
      run: |
        echo "Current dotnet runtime hash result: $DOTNET_RUNTIME_HASH"
        echo "Current Externals hash result: $EXTERNALS_HASH"

        echo "$EXTERNALS_HASH" > ./src/Misc/contentHash/externals/${{ matrix.runtime }}
       
        echo "$DOTNET_RUNTIME_HASH" > ./src/Misc/contentHash/dotnetRuntime/${{ matrix.runtime }}
      env:
        DOTNET_RUNTIME_HASH: ${{hashFiles('**/_layout_trims/runtime/**/*')}}
        EXTERNALS_HASH: ${{hashFiles('**/_layout_trims/externals/**/*')}}
    - name: GIT commit and push all changed files
      env: 
        CI_COMMIT_MESSAGE: Update ${{ matrix.runtime }} hashes
        CI_COMMIT_AUTHOR: AutoUpdater
      shell: bash
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"

        git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
        git push --set-upstream origin ${{ needs.dotnet-update.outputs.BRANCH_NAME }}

  create-pr:
    needs: [build-hashes]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.build-hashes.outputs.BRANCH_NAME }}
    - name: Create Pull Request
      env:
        TARGET_BRANCH: ${{ needs.build-hashes.outputs.BRANCH_NAME }}
        TITLE: Update dotnet sdk to latest version @ ${{ steps.fetch_latest_patch.outputs.DOTNET_LATEST_VERSION }}
        BODY: '
          https://dotnetcli.blob.core.windows.net/dotnet/Sdk/${{ env.MAJOR_MINOR_VERSION }}/latest.version
          
            
          ---
            
          Autogenerated by [DotNet SDK Upgrade Workflow](https://github.com/actions/runner/blob/main/.github/workflows/dotnet-upgrade.yml)'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create -B main -H ${{ env.TARGET_BRANCH }} --title "${{ env.TITLE }}" --body "${{ env.BODY }}"
