name: Publish Runner Image

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: 'Branch to run the workflow on'
        default: 'main'
      targetPlatform:
        type: string
        description: 'targetPlatform to build'
        default: 'linux/amd64'
      runnerVersion:
        type: string
        description: Version of the runner being installed
      imageName:
        type: string
        description: The name of the image
      runsOn:
        type: string
        description: The environment that this job runs on, such ubuntu-latest
        default: ubuntu-latest

env:
  IMAGE_NAME: github-action-runners/${{ github.event.inputs.imageName }}
  HOST_TMP_TOOL_CACHE: hosttmptoolcache

jobs:
  build:
    runs-on: ${{ github.event.inputs.runsOn }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Clear any existing tool cache
        run: |
          mv "${RUNNER_TOOL_CACHE}" "${RUNNER_TOOL_CACHE}.old"
          mkdir -p "${RUNNER_TOOL_CACHE}"

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      # dockerfile COPY command need file in context
      - name: Copy tool cache to docker context
        id: copy-tool-cache
        run: |
          mkdir -p ./images/${HOST_TMP_TOOL_CACHE}
          cp -r $RUNNER_TOOL_CACHE/* ./images/${HOST_TMP_TOOL_CACHE}/

      - name: Compute image version
        id: image
        uses: actions/github-script@v6
        env:
          RUNNER_VERSION: ${{ github.event.inputs.runnerVersion }}
        with:
          script: |
            const fs = require('fs');
            const inputRunnerVersion = process.env.RUNNER_VERSION;
            if (inputRunnerVersion) {
              console.log(`Using input runner version ${inputRunnerVersion}`)
              core.setOutput('version', inputRunnerVersion);
              return
            }
            const runnerVersion = fs.readFileSync('${{ github.workspace }}/src/runnerversion', 'utf8').replace(/\n$/g, '')
            console.log(`Using runner version ${runnerVersion}`)
            core.setOutput('version', runnerVersion);

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ vars.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ./images
          file: ./images/Dockerfile.${{ github.event.inputs.imageName }}
          platforms: |
            linux/amd64
          tags: |
            ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.version }}
            ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            RUNNER_VERSION=${{ steps.image.outputs.version }}
            TARGETPLATFORM=${{ github.event.inputs.targetPlatform }}
            HOST_TMP_TOOL_CACHE=${{ env.HOST_TMP_TOOL_CACHE }}
          push: true
          labels: |
            org.opencontainers.image.source=${{github.server_url}}/${{github.repository}}
            org.opencontainers.image.description=https://github.com/actions/runner/releases/tag/v${{ steps.image.outputs.version }}
            org.opencontainers.image.licenses=MIT
