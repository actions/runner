name: "Lint"

on:
  pull_request:
    branches: "main"

jobs:
  build:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Ensure full list of changed files within `super-linter`
          fetch-depth: 0
      - name: Run linters
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: ${{ github.base_ref }}
          EDITORCONFIG_FILE_NAME: .editorconfig
          LINTER_RULES_PATH: /src/
          VALIDATE_ALL_CODEBASE: "false"
          VALIDATE_CSHARP: "true"

            - nombre: caché
  usos: acciones/cache@v4.0.2
  con:
    # Una lista de archivos, directorios y patrones comodín para almacenar en caché y restaurar
    camino:
    # Una clave explícita para restaurar y guardar el caché
    llave:
    # Una lista ordenada de claves que se utilizarán para restaurar el caché obsoleto si no se produjo ningún acierto en el caché para la clave. Tenga en cuenta que `cache-hit` devuelve falso en este caso.
    restaurar claves: # opcional
    # El tamaño del fragmento utilizado para dividir archivos grandes durante la carga, en bytes
    tamaño del fragmento de carga: # opcional
    # Un valor booleano opcional, cuando está habilitado, permite a los corredores de Windows guardar o restaurar cachés que se pueden restaurar o guardar respectivamente en otras plataformas.
    enableCrossOsArchive: # opcional, el valor predeterminado es falso
    # Falla el flujo de trabajo si no se encuentra la entrada de caché
    fail-on-cache-miss: # opcional, el valor predeterminado es falso
    # Comprobar si existe una entrada de caché para las entradas dadas (clave, claves de restauración) sin descargar el caché
    solo búsqueda: # opcional, el valor predeterminado es falso
    # Ejecute el paso de publicación para guardar el caché incluso si falla otro paso anterior
    guardar-siempre: # opcional, el valor predeterminado es falso
          
