name: Runner CD

on:
  workflow_dispatch:
  push:
    paths:
    - releaseVersion

jobs:
  check:
    if: startsWith(github.ref, 'refs/heads/releases/') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Make sure ./releaseVersion match ./src/runnerversion
    # Query GitHub release ensure version is not used
    - name: Check version
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const runnerVersion = fs.readFileSync('${{ github.workspace }}/src/runnerversion', 'utf8').replace(/\n$/g, '')
          const releaseVersion = fs.readFileSync('${{ github.workspace }}/releaseVersion', 'utf8').replace(/\n$/g, '')
          if (runnerVersion != releaseVersion) {
            console.log('Request Release Version: ' + releaseVersion + '\nCurrent Runner Version: ' + runnerVersion)
            core.setFailed('Version mismatch! Make sure ./releaseVersion match ./src/runnerVersion')
            return
          }
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: '${{ github.event.repository.owner.name }}',
              repo: '${{ github.event.repository.name }}',
              tag: 'v' + runnerVersion
            })
            core.setFailed('Release with same tag already created: ' + release.data.html_url)
          } catch (e) {
            // We are good to create the release if release with same tag doesn't exists
            if (e.status != 404) {
              throw e
            }
          }

  build:
    needs: check
    outputs:
      linux-x64-sha: ${{ steps.sha.outputs.linux-x64-sha256 }}
      linux-arm64-sha: ${{ steps.sha.outputs.linux-arm64-sha256 }}
      linux-s390x-sha: ${{ steps.sha.outputs.linux-s390x-sha256 }}
      linux-ppc64le-sha: ${{ steps.sha.outputs.linux-ppc64le-sha256 }}
    strategy:
      matrix:
        runtime: [ linux-s390x, linux-ppc64le, linux-x64, linux-arm64 ]
        include:
        - runtime: linux-s390x
          runs_on: s390x
          patch_tag: s390x

        - runtime: linux-ppc64le
          runs_on: ppc64le
          patch_tag: ppc64le

        - runtime: linux-x64
          runs_on: amd64

        - runtime: linux-arm64
          runs_on: arm64

    runs-on: [ self-hosted, noble, "${{ matrix.runs_on }}" ]
    steps:
    - uses: actions/checkout@v4

    - name: Install DotNet SDK
      run: sudo apt-get update && sudo apt-get install -y dotnet-sdk-8.0

    - name: Apply patches
      if: matrix.runtime == 'linux-s390x' || matrix.runtime == 'linux-ppc64le'
      run: |
        git apply patches/runner-main-sdk8-${{ matrix.patch_tag }}.patch

    - name: Update DotNet required version pin
      run: |
        sed -i "s/$( cat src/global.json | jq -r '.sdk.version' )/8.0/" src/global.json

    # Build runner layout
    - name: Build & Layout Release
      run: |
        ./dev.sh layout Release ${{ matrix.runtime }}
      working-directory: src

    # Create runner package tar.gz/zip
    - name: Package Release
      if: github.event_name != 'pull_request'
      run: |
        ./dev.sh package Release ${{ matrix.runtime }}
      working-directory: src

    - name: Test package
      if: github.event_name != 'pull_request'
      run: |
        mkdir package_test
        tar -xvzf ../_package/*.tar.gz -C package_test
        ./package_test/config.sh --version
      working-directory: src
        

    # compute shas and set as job outputs to use in release notes
    - run: |
        file=$(ls)
        sha=$(sha256sum $file | awk '{ print $1 }')
        echo "Computed sha256: $sha for $file"
        echo "${{matrix.runtime}}-sha256=$sha" >> $GITHUB_OUTPUT
      shell: bash
      id: sha
      name: Compute SHA256
      working-directory: _package

    # Upload runner package tar.gz/zip as artifact.
    - name: Publish Artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: runner-packages-${{ matrix.runtime }}
        path: |
          _package

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4

    # Download runner package tar.gz/zip produced by 'build' job
    - name: Download Artifact (linux-x64)
      uses: actions/download-artifact@v4
      with:
        name: runner-packages-linux-x64
        path: ./
    - name: Download Artifact (linux-arm64)
      uses: actions/download-artifact@v4
      with:
        name: runner-packages-linux-arm64
        path: ./

    - name: Download Artifact (linux-ppc64le)
      uses: actions/download-artifact@v4
      with:
        name: runner-packages-linux-ppc64le
        path: ./

    - name: Download Artifact (linux-s390x)
      uses: actions/download-artifact@v4
      with:
        name: runner-packages-linux-s390x
        path: ./

    # Create ReleaseNote file
    - name: Create ReleaseNote
      id: releaseNote
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const runnerVersion = fs.readFileSync('${{ github.workspace }}/src/runnerversion', 'utf8').replace(/\n$/g, '')
          var releaseNote = fs.readFileSync('${{ github.workspace }}/releaseNote.md', 'utf8').replace(/<RUNNER_VERSION>/g, runnerVersion)
          releaseNote = releaseNote.replace(/<LINUX_X64_SHA>/g, '${{needs.build.outputs.linux-x64-sha}}')
          releaseNote = releaseNote.replace(/<LINUX_ARM64_SHA>/g, '${{needs.build.outputs.linux-arm64-sha}}')
          releaseNote = releaseNote.replace(/<LINUX_PPC64LE_SHA>/g, '${{needs.build.outputs.linux-ppc64le-sha}}')
          releaseNote = releaseNote.replace(/<LINUX_S390X_SHA>/g, '${{needs.build.outputs.linux-s390x-sha}}')
          console.log(releaseNote)
          core.setOutput('version', runnerVersion);
          core.setOutput('note', releaseNote);

    - name: Validate Packages HASH
      run: |
        ls -l
        echo "${{needs.build.outputs.linux-x64-sha}}  actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz" | shasum -a 256 -c
        echo "${{needs.build.outputs.linux-arm64-sha}}  actions-runner-linux-arm64-${{ steps.releaseNote.outputs.version }}.tar.gz" | shasum -a 256 -c
        echo "${{needs.build.outputs.linux-ppc64le-sha}}  actions-runner-linux-ppc64le-${{ steps.releaseNote.outputs.version }}.tar.gz" | shasum -a 256 -c
        echo "${{needs.build.outputs.linux-s390x-sha}}  actions-runner-linux-s390x-${{ steps.releaseNote.outputs.version }}.tar.gz" | shasum -a 256 -c

    # Create GitHub release
    - uses: actions/create-release@master
      id: createRelease
      name: Create ${{ steps.releaseNote.outputs.version }} Runner Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.releaseNote.outputs.version }}"
        release_name: "v${{ steps.releaseNote.outputs.version }}"
        body: |
          ${{ steps.releaseNote.outputs.note }}

    # Upload release assets (full runner packages)
    - name: Upload Release Asset (linux-x64)
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_name: actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (linux-arm64)
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/actions-runner-linux-arm64-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_name: actions-runner-linux-arm64-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (linux-ppc64le)
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/actions-runner-linux-ppc64le-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_name: actions-runner-linux-ppc64le-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (linux-s390x)
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/actions-runner-linux-s390x-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_name: actions-runner-linux-s390x-${{ steps.releaseNote.outputs.version }}.tar.gz
        asset_content_type: application/octet-stream

    - uses: mattermost/action-mattermost-notify@master
      if: ${{ failure() }}
      with:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MM_WEBHOOK_URL }}
        MATTERMOST_CHANNEL: is-devops-alerts
        TEXT: |
          ${{ github.repository }} release failed.
          [Pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) was failed :red_circle:
          ${{ secrets.MM_PING_USERS }}
        MATTERMOST_USERNAME: ${{ github.triggering_actor }}
        MATTERMOST_ICON_URL: https://www.flaticon.com/free-icon/github-logo_25231
