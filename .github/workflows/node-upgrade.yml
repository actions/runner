name: Auto Update Node Version

on:
  schedule:
    - cron: "0 6 * * 1" # Weekly, every Monday
  workflow_dispatch:

jobs:
  update-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Get latest Node versions
        id: node-versions
        run: |
          # Get latest versions from the versions manifest
          VERSIONS_JSON=$(curl -s https://raw.githubusercontent.com/actions/node-versions/main/versions-manifest.json)

          # Get latest v20 and v24 versions
          LATEST_NODE20=$(echo "$VERSIONS_JSON" | jq -r '.[] | select(.version | startswith("20.")) | .version' | head -1)
          LATEST_NODE24=$(echo "$VERSIONS_JSON" | jq -r '.[] | select(.version | startswith("24.")) | .version' | head -1)

          echo "latest_node20=$LATEST_NODE20" >> $GITHUB_OUTPUT
          echo "latest_node24=$LATEST_NODE24" >> $GITHUB_OUTPUT

          # Check current versions in externals.sh
          CURRENT_NODE20=$(grep "NODE20_VERSION=" src/Misc/externals.sh | cut -d'"' -f2)
          CURRENT_NODE24=$(grep "NODE24_VERSION=" src/Misc/externals.sh | cut -d'"' -f2)

          echo "current_node20=$CURRENT_NODE20" >> $GITHUB_OUTPUT
          echo "current_node24=$CURRENT_NODE24" >> $GITHUB_OUTPUT

          # Determine if updates are needed
          NEEDS_UPDATE20="false"
          NEEDS_UPDATE24="false"

          if [ "$CURRENT_NODE20" != "$LATEST_NODE20" ]; then
            NEEDS_UPDATE20="true"
          fi

          if [ "$CURRENT_NODE24" != "$LATEST_NODE24" ]; then
            NEEDS_UPDATE24="true"
          fi

          echo "needs_update20=$NEEDS_UPDATE20" >> $GITHUB_OUTPUT
          echo "needs_update24=$NEEDS_UPDATE24" >> $GITHUB_OUTPUT

      - name: Update externals.sh and create PR
        if: steps.node-versions.outputs.needs_update20 == 'true' || steps.node-versions.outputs.needs_update24 == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update the files
          if [ "${{ steps.node-versions.outputs.needs_update20 }}" == "true" ]; then
            sed -i 's/NODE20_VERSION="[^"]*"/NODE20_VERSION="${{ steps.node-versions.outputs.latest_node20 }}"/' src/Misc/externals.sh
          fi

          if [ "${{ steps.node-versions.outputs.needs_update24 }}" == "true" ]; then
            sed -i 's/NODE24_VERSION="[^"]*"/NODE24_VERSION="${{ steps.node-versions.outputs.latest_node24 }}"/' src/Misc/externals.sh
          fi

          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "<41898282+github-actions[bot]@users.noreply.github.com>"

          # Create branch and commit changes
          branch_name="chore/update-node"
          git checkout -b "$branch_name"
          git commit -a -m "chore: update Node versions (20: ${{ steps.node-versions.outputs.latest_node20 }}, 24: ${{ steps.node-versions.outputs.latest_node24 }})"
          git push --force origin "$branch_name"

          # Create PR body using here-doc for proper formatting
          cat > pr_body.txt << 'EOF'
          Automated Node.js version update:
          
          - Node 20: ${{ steps.node-versions.outputs.current_node20 }} → ${{ steps.node-versions.outputs.latest_node20 }}
          - Node 24: ${{ steps.node-versions.outputs.current_node24 }} → ${{ steps.node-versions.outputs.latest_node24 }}
          
          This update ensures we're using the latest stable Node.js versions for security and performance improvements.
          
          **Note**: When updating Node versions, remember to also create a new release of alpine_nodejs at the updated version following the instructions at: https://github.com/actions/alpine_nodejs
          
          ---
          
          Autogenerated by [Node Version Upgrade Workflow](https://github.com/actions/runner/blob/main/.github/workflows/node-upgrade.yml)
          EOF
          
          # Create PR
          gh pr create -B main -H "$branch_name" \
            --title "chore: update Node versions" \
            --label "dependency" \
            --body-file pr_body.txt