FROM ubuntu:24.04@sha256:1e622c5f073b4f6bfad6632f2616c7f59ef256e96fe78bf6a595d1dc4376ac02

ENV TZ=Asia/Shanghai \
    DEBIAN_FRONTEND=noninteractive

ARG PYTHON_VERSION="3.12"
RUN apt-get update -y \
    && apt-get install -y software-properties-common \
    && add-apt-repository -y ppa:git-core/ppa \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update -y \
    && apt-get install -y --no-install-recommends \
    lsb-release \
    ca-certificates \
    wget \
    software-properties-common \
    gnupg \
    apt-transport-https \
    wget \
    g++ \
    gcc \
    gdb \
    xxd \
    libc++abi-dev \
    libc++-dev \
    ssh \
    libssl-dev \
    sshpass \
    git \
    git-lfs \
    autoconf \
    automake \
    make \
    cmake \
    pkg-config \
    python$PYTHON_VERSION \
    python3-pip \
    libffi-dev \
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    unzip \
    zip \
    openjdk-11-jdk \
    telnet \
    libreadline-dev \
    libncurses5 \
    curl \
    vim \
    lsof \
    swig \
    net-tools \
    netcat-traditional \
    default-libmysqlclient-dev \
    qemu-kvm \
    systemd \
    tzdata \
    locales \
    flex \
    bison \
    lldb \
    libunwind8 \
    jq \
    sudo \
    iptables \
    zstd \
    && rm -rf /var/lib/apt/lists/*

ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
ENV PATH="$JAVA_HOME/bin:$PATH"

# Download latest git-lfs version
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
    apt-get install -y --no-install-recommends git-lfs

ARG RUNNER_USER_UID=1001
ARG DOCKER_GROUP_GID=121
RUN adduser --disabled-password --gecos "" --uid $RUNNER_USER_UID runner \
    && groupadd docker --gid $DOCKER_GROUP_GID \
    && usermod -aG sudo runner \
    && usermod -aG docker runner \
    && echo "%sudo   ALL=(ALL:ALL) NOPASSWD:ALL" > /etc/sudoers \
    && echo "Defaults env_keep += \"DEBIAN_FRONTEND\"" >> /etc/sudoers

ENV HOME=/home/runner
WORKDIR /home/runner

ARG RUNNER_VERSION
ARG RUNNER_CONTAINER_HOOKS_VERSION=0.6.1
ARG DUMB_INIT_VERSION=1.2.5

ARG TARGETPLATFORM
RUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "arm64" ]; then export ARCH=aarch64 ; fi \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "i386" ]; then export ARCH=x86_64 ; fi \
    && curl -fLo /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_${ARCH} \
    && chmod +x /usr/bin/dumb-init

ENV RUNNER_ASSETS_DIR=/home/runner
RUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "i386" ]; then export ARCH=x64 ; fi \
    && mkdir -p "$RUNNER_ASSETS_DIR" \
    && cd "$RUNNER_ASSETS_DIR" \
    && curl -fLo runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz \
    && tar xzf ./runner.tar.gz \
    && rm runner.tar.gz \
    && ./bin/installdependencies.sh \
    # libyaml-dev is required for ruby/setup-ruby action.
    # It is installed after installdependencies.sh and before removing /var/lib/apt/lists
    # to avoid rerunning apt-update on its own.
    && apt-get install -y libyaml-dev \
    && rm -rf /var/lib/apt/lists/*

# Prepare tool cache
ENV RUNNER_TOOL_CACHE=/opt/hostedtoolcache
RUN mkdir ${RUNNER_TOOL_CACHE} \
    && chgrp docker ${RUNNER_TOOL_CACHE} \
    && chmod g+rwx ${RUNNER_TOOL_CACHE}
ARG HOST_TMP_TOOL_CACHE
COPY --chown=$RUNNER_USER_UID:$RUNNER_USER_UID ./$HOST_TMP_TOOL_CACHE/ $RUNNER_TOOL_CACHE/

RUN cd "$RUNNER_ASSETS_DIR" \
    && curl -fLo runner-container-hooks.zip https://github.com/actions/runner-container-hooks/releases/download/v${RUNNER_CONTAINER_HOOKS_VERSION}/actions-runner-hooks-k8s-${RUNNER_CONTAINER_HOOKS_VERSION}.zip \
    && unzip ./runner-container-hooks.zip -d ./k8s \
    && rm -f runner-container-hooks.zip

# Docker Buildx and Docker Compose
ARG CHANNEL=stable
ARG DOCKER_VERSION=24.0.7
ARG DOCKER_COMPOSE_VERSION=v2.23.0
ARG BUILDX_VERSION=0.21.0
RUN set -vx; \
    export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "arm64" ]; then export DOCKER_ARCH=aarch64 && export BUILDX_ARCH=arm64 ; fi \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "i386" ]; then export DOCKER_ARCH=x86_64 && export BUILDX_ARCH=amd64; fi \
    && curl -fLo docker.tgz https://download.docker.com/linux/static/${CHANNEL}/${DOCKER_ARCH}/docker-${DOCKER_VERSION}.tgz \
    && tar zxvf docker.tgz \
    && install -o root -g root -m 755 docker/* /usr/bin/ \
    && rm -rf docker docker.tgz \
    && mkdir -p /usr/local/lib/docker/cli-plugins \
    && curl -fLo /usr/local/lib/docker/cli-plugins/docker-buildx \
        "https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-${BUILDX_ARCH}" \
    && chmod +x /usr/local/lib/docker/cli-plugins/docker-buildx

RUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "arm64" ]; then export ARCH=aarch64 ; fi \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "i386" ]; then export ARCH=x86_64 ; fi \
    && mkdir -p /usr/libexec/docker/cli-plugins \
    && curl -fLo /usr/libexec/docker/cli-plugins/docker-compose https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${ARCH} \
    && chmod +x /usr/libexec/docker/cli-plugins/docker-compose \
    && ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose \
    && which docker-compose \
    && docker compose version

# Update PIP (Python's package manager)
RUN python3 -m pip install --upgrade pip

# Add the Python "User Script Directory" to the PATH
ENV PATH="${PATH}:${HOME}/.local/bin/"

# Set PYTHON_VERSION as the default Python interpreter
RUN update-alternatives --install /usr/bin/python3 python /usr/bin/python$PYTHON_VERSION 1
RUN update-alternatives --set python /usr/bin/python$PYTHON_VERSION

USER runner

# Add the Android sdk,ndk,avd
# All versions of NDK to be installed.
ARG ANDROID_NDK_LIST="21.1.6352462;26.3.11579264"
# The NDK version being used to build release product.
ARG ANDROID_NDK_DEFAULT="21.1.6352462"
ENV ANDROID_HOME ${HOME}/Android/SDK
ENV ANDROID_NDK $ANDROID_HOME/ndk/$ANDROID_NDK_DEFAULT
# A legacy NDK21 argument to be deprecated.
ENV ANDROID_NDK_21 $ANDROID_NDK

# Install sdkmanager command line tool
ARG CMD_LINE_VERSION=9477386_latest
RUN wget -q https://dl.google.com/android/repository/commandlinetools-linux-${CMD_LINE_VERSION}.zip -P /tmp
RUN mkdir -p $ANDROID_HOME
RUN unzip -d $ANDROID_HOME /tmp/commandlinetools-linux-${CMD_LINE_VERSION}.zip
RUN rm /tmp/commandlinetools-linux-${CMD_LINE_VERSION}.zip
ENV PATH $PATH:$ANDROID_HOME/cmdline-tools/bin

ENV PATH $PATH:$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/share/clang:$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/emulator


# Accept license
RUN yes | sdkmanager --licenses --sdk_root=$ANDROID_HOME
# Install android sdk
RUN sdkmanager --sdk_root=$ANDROID_HOME --install \
    "system-images;android-28;google_apis;x86" \
    "platforms;android-30" \
    "build-tools;29.0.1" \
    "platform-tools"
# Install android ndk
RUN echo $ANDROID_NDK_LIST | awk -F ';' '{ for(i=1; i<=NF; i++) print $i }' \
    | while read -r substring; do sdkmanager --sdk_root=$ANDROID_HOME --install "ndk;$substring"; done
# Setup avd
RUN avdmanager --verbose create avd --force --name "Nexus_5_API_28" \
      --package "system-images;android-28;google_apis;x86" \
      --force -d "Nexus 5"

USER root
ENV ImageOS=ubuntu22
RUN echo "PATH=${PATH}" > /etc/environment \
    && echo "ImageOS=${ImageOS}" >> /etc/environment

RUN ln -s $ANDROID_HOME $ANDROID_HOME/SDK

USER runner

# Add hook scripts to the mirror to hide encrypted information.
COPY .env .
COPY --chmod=0755 hook.sh /opt/runner/hook.sh
